[{"categories":["VisualStudio"],"content":"Learn how to open Visual Studio solution files as an administrator in 2019/2022 for seamless project execution.","date":"2024-12-05","objectID":"/2024/12/visual-studio-open-sln-with-admin/","series":null,"tags":["VisualStudio","VSCode","Windows"],"title":"Visual Studio 2019/2022 使用系統管理員身分打開方案檔 (*.sln)","uri":"/2024/12/visual-studio-open-sln-with-admin/"},{"categories":["VisualStudio"],"content":"有些專案的程式需要用系統管理員權限才能執行，以往都是先用系統管理員身分打開 Visual Studio，再手動打開方案，查了之後才發現有方法可以直接對方案檔以系統管理員身分打開 打開登錄編輯程式，新增機碼 Visual Studio 2019 HKEY_CLASSES_ROOT\\VisualStudio.sln.267dcece\\shell\\RunAs\\Command 預設值 \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\[VS Version]\\Common7\\IDE\\devenv.exe\" \"%1\" Visual Studio 2022 HKEY_CLASSES_ROOT\\VisualStudio.sln.847708e2\\shell\\RunAs\\Command 預設值 \"C:\\Program Files\\Microsoft Visual Studio\\2022\\[VS Version]\\Common7\\IDE\\devenv.exe\" \"%1\" 其中 [VS Version] 替換為 Visual Studio 的版本，比如說 Community 或 Enterprise 或是把下面內容另存成 xxx.reg，再雙擊執行 VS2019 reg Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\VisualStudio.sln.267dcece\\shell\\RunAs] [HKEY_CLASSES_ROOT\\VisualStudio.sln.267dcece\\shell\\RunAs\\command] @=\"\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\Common7\\\\IDE\\\\devenv.exe\\\" \\\"%1\\\"\" VS2022 reg Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\VisualStudio.sln.847708e2\\shell\\RunAs] [HKEY_CLASSES_ROOT\\VisualStudio.sln.847708e2\\shell\\RunAs\\command] @=\"\\\"C:\\\\Program Files\\\\Microsoft Visual Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\devenv.exe\\\" \\\"%1\\\"\" 重新開機後，工作列對 Visual Studio Icon 按右鍵的專案選單，或是檔案總管對 .sln 檔按右鍵的選單都會出現 以系統管理員身分執行 Explorer 右鍵選單 工作列右鍵選單 ","date":"2024-12-05","objectID":"/2024/12/visual-studio-open-sln-with-admin/:0:0","series":null,"tags":["VisualStudio","VSCode","Windows"],"title":"Visual Studio 2019/2022 使用系統管理員身分打開方案檔 (*.sln)","uri":"/2024/12/visual-studio-open-sln-with-admin/#"},{"categories":["VisualStudio"],"content":" Reference https://stackoverflow.com/a/43942660/1568102 ","date":"2024-12-05","objectID":"/2024/12/visual-studio-open-sln-with-admin/:1:0","series":null,"tags":["VisualStudio","VSCode","Windows"],"title":"Visual Studio 2019/2022 使用系統管理員身分打開方案檔 (*.sln)","uri":"/2024/12/visual-studio-open-sln-with-admin/#reference"},{"categories":["VisualStudio"],"content":"Discover essential download links for Visual Studio Build Tools and learn how to set up offline installations efficiently.","date":"2024-10-22","objectID":"/2024/10/visual-studio-build-tools-download/","series":null,"tags":["batch","msbuild","VisualStudio","Windows"],"title":"Visual Studio Build Tools 下載點整理","uri":"/2024/10/visual-studio-build-tools-download/"},{"categories":["VisualStudio"],"content":"Visual Studio Build Tools 下載點整理 Visual Studio 2017 Community Build Tools for Visual Studio 2017 Visual Studio 2019 Community Build Tools for Visual Studio 2019 Visual Studio 2022 Community Build Tools for Visual Studio 2022 離線下載 batch vs_BuildTools.exe --layout C:\\offline_layouts --lang en-US ^ --add Microsoft.VisualStudio.Workload.MSBuildTools ^ --add Microsoft.VisualStudio.Workload.ManagedDesktopBuildTools ^ --add Microsoft.VisualStudio.Workload.VCTools ^ --add Microsoft.VisualStudio.Component.VC.ATLMFC ^ --add Microsoft.VisualStudio.Component.Windows81SDK ^ --includeRecommended --includeOptional 離線安裝 batch C:\\offline_layouts\\vs_buildtools.exe --noweb ","date":"2024-10-22","objectID":"/2024/10/visual-studio-build-tools-download/:0:0","series":null,"tags":["batch","msbuild","VisualStudio","Windows"],"title":"Visual Studio Build Tools 下載點整理","uri":"/2024/10/visual-studio-build-tools-download/#"},{"categories":["Tools"],"content":"Discover essential examples and tips for using yt-dlp effectively to enhance your video downloading experience.","date":"2024-06-18","objectID":"/2024/06/yt-dlp-use-case/","series":null,"tags":["cmd","YouTube","yt-dlp"],"title":"yt-dlp 使用範例","uri":"/2024/06/yt-dlp-use-case/"},{"categories":["Tools"],"content":"收集 yt-dlp 基本使用方式 ","date":"2024-06-18","objectID":"/2024/06/yt-dlp-use-case/:0:0","series":null,"tags":["cmd","YouTube","yt-dlp"],"title":"yt-dlp 使用範例","uri":"/2024/06/yt-dlp-use-case/#"},{"categories":["Tools"],"content":" 更新Update help shell yt-dlp -U yt-dlp --update-to stable # To update to nightly from stable executable/binary: yt-dlp --update-to nightly ","date":"2024-06-18","objectID":"/2024/06/yt-dlp-use-case/:1:0","series":null,"tags":["cmd","YouTube","yt-dlp"],"title":"yt-dlp 使用範例","uri":"/2024/06/yt-dlp-use-case/#更新"},{"categories":["Tools"],"content":" 設定Configuration help 設定檔路徑 (Windows): %APPDATA%\\yt-dlp\\ 內容範例 conf # 從瀏覽器讀取 cookies --cookies-from-browser brave:Default # 預設下載位置 -o \"E:\\Downloads\\YouTube\\%(title)s.%(ext)s\" 若發生以下錯誤 text PermissionError: [Errno 13] Permission denied: 'Path/To/Chromium/Cookies' 可嘗試加入另外下載 plugins: yt-dlp-ChromeCookieUnlock 放到 %APPDATA%\\ytl-dlp\\plugins\\ 裡面 https://github.com/yt-dlp/yt-dlp/issues/7271#issuecomment-1979912216 ","date":"2024-06-18","objectID":"/2024/06/yt-dlp-use-case/:2:0","series":null,"tags":["cmd","YouTube","yt-dlp"],"title":"yt-dlp 使用範例","uri":"/2024/06/yt-dlp-use-case/#設定"},{"categories":["Tools"],"content":" 列出格式Format help shell yt-dlp -F [YT_Link] yt-dlp --list-formats [YT_Link] ","date":"2024-06-18","objectID":"/2024/06/yt-dlp-use-case/:3:0","series":null,"tags":["cmd","YouTube","yt-dlp"],"title":"yt-dlp 使用範例","uri":"/2024/06/yt-dlp-use-case/#列出格式"},{"categories":["Tools"],"content":" 下載 shell -f bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best ","date":"2024-06-18","objectID":"/2024/06/yt-dlp-use-case/:4:0","series":null,"tags":["cmd","YouTube","yt-dlp"],"title":"yt-dlp 使用範例","uri":"/2024/06/yt-dlp-use-case/#下載"},{"categories":["Docker"],"content":"Windows Container 中安裝 Visual Studio 2017 BuildTools，編譯 C++ 專案發生錯誤 text LINK : fatal error LNK1318: Unexpected PDB error; RPC (23) '(0x000006E7) 根據查到的資料，應該是 Docker 的 bug 裡面提到的 workround 有 3 個 docker run 加入參數 --isolation=process Debug Information Format 改成 None or C7 compatible (/Z7)，msbuild 編譯參數加入 /property:_IsNativeEnvironment=true 不要把 source mount 出來，只存在 container 中編譯 因為是用 cmake 編譯，裡面會自動呼叫 msbuild 命令，一時間也不知道怎麼用解法1,2 所以暫時先把 docker volume mount 取消掉，再測試後就可以正常編譯了 ","date":"2024-04-17","objectID":"/2024/04/msbuild-error-lnk1318-in-docker/:0:0","series":null,"tags":["CI/CD","Docker","msbuild","Windows"],"title":"在 Docker 中執行 msbuild 編譯 C++ 專案發生 LNK1318 錯誤","uri":"/2024/04/msbuild-error-lnk1318-in-docker/#"},{"categories":["Windows"],"content":"記錄怎麼在 WinXP 安裝 .NET Framework 2.0 及 Powershell 2.0 相關資訊 .NET Framework 2.0 https://www.microsoft.com/zh-tw/download/details.aspx?id=16614 https://download.microsoft.com/download/0/8/c/08c19fa4-4c4f-4ffb-9d6c-150906578c9e/NetFx20SP1_x86.exe Powershell 2.0 https://www.catalog.update.microsoft.com/Search.aspx?q=Windows%20Management%20Framework https://catalog.s.download.windowsupdate.com/msdownload/update/software/updt/2009/11/windowsxp-kb968930-x86-cht_b510d9962ee24d39632ee075aa671948582ba346.exe ","date":"2024-01-12","objectID":"/2024/01/install-net20-powershell2-in-winxp/:0:0","series":null,"tags":["LegacyCode","Windows"],"title":"WinXP 安裝 .NET Framework 2.0 及 Powershell 2.0","uri":"/2024/01/install-net20-powershell2-in-winxp/#"},{"categories":["VSCode"],"content":"手邊處理舊的 BCB6 專案，只是要單純打開看跟簡單的編輯，就沒有另外用 BCB 的 IDE 打開，VSCode 的 Syntax Highlight 壞掉了 似乎是因為 VSCode 的 Extension TypeLens 沒辦法正確解析 BCB code 的 reference，讓它覺得所有的 code 都沒用到，就顯示為灰色了 在設定中停用 typelens.decorateunused 就正常了 json { \"typelens.decorateunused\": false } ","date":"2024-01-09","objectID":"/2024/01/vscode-display-wrong-syntax-highlight-in-legacy-cpp-code/:0:0","series":null,"tags":["Editor","LegacyCode","VSCode"],"title":"VSCode 開啟老舊 C++ 檔案無法正確顯示標色","uri":"/2024/01/vscode-display-wrong-syntax-highlight-in-legacy-cpp-code/#"},{"categories":["dotnet"],"content":"為了簡化專案版號的控制，測試引入 Nerdbank.GitVersioning 來協助自動加入 Assembly version 和 git commit id 本機測試正常，但 CI 環境上使用 dotnet build 編譯的時候跳錯誤 錯誤訊息如下 text C:\\Users\\XXX\\.nuget\\packages\\nerdbank.gitversioning\\3.6.133\\build\\Nerdbank.GitVersioning.Inner.targets(17,5): error MSB4062: 無法從組件 C:\\Users\\XXX\\.nuget\\packages\\nerdbank.gitversioning\\3.6.133\\build\\MSBuildCore/Nerdbank.GitVersioning.Tasks.dll 載入 \"Nerdbank.GitVersioning.Tasks.GetBuildVersion\" 工作。 Could not load file or assembly 'System.Runtime.Loader, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a'. 系統找不到指定的檔案。 請確認 \u003cUsingTask\u003e 宣告正確、該組件和其所有相依性都可使用，以及該工作包含一個實作 Microsoft.Build.Framework.ITask 的公用類別。 [C:\\Users\\XXX\\.nuget\\packages\\nerdbank.gitversioning\\3.6.133\\build\\PrivateP2PCaching.proj] 查到後面發現 CI 環境上只有安裝到 .NET 5.0 SDK，而 Nerdbank.GitVersioning 需要 6.0 以上 在 CI 環境上安裝 .NET 6.0 SDK 後就可以正常對專案執行 dotnet build 了 最後在專案根目錄加入 global.json 指定 .NET SDK 版本 json { \"sdk\": { \"version\": \"6.0.417\" } } ","date":"2023-11-27","objectID":"/2023/11/reference-nerdbank-gitversioning-build-failed/:0:0","series":null,"tags":["CI/CD","dotnet","msbuild","VisualStudio"],"title":"專案參考 Nerdbank.GitVersioning 後，使用 dotnet build 編譯失敗","uri":"/2023/11/reference-nerdbank-gitversioning-build-failed/#"},{"categories":["dotnet"],"content":" 參考 https://github.com/dotnet/Nerdbank.GitVersioning/issues/934 https://learn.microsoft.com/en-us/dotnet/core/tools/global-json ","date":"2023-11-27","objectID":"/2023/11/reference-nerdbank-gitversioning-build-failed/:1:0","series":null,"tags":["CI/CD","dotnet","msbuild","VisualStudio"],"title":"專案參考 Nerdbank.GitVersioning 後，使用 dotnet build 編譯失敗","uri":"/2023/11/reference-nerdbank-gitversioning-build-failed/#參考"},{"categories":["CI/CD"],"content":"GitLab Runner 在 fetch 專案時，預設會在 fetch 後執行 git clean -ffdx 命令，讓專案目錄維持在乾淨的狀態 然而有時候我們會想要保留一些目錄或檔案，讓下次編譯時不需要重新產生以節省編譯時間 (例如 Unity 專案的 Library 目錄)，GitLab 有提供一些方式來達成這個目標 ","date":"2023-11-23","objectID":"/2023/11/preserve-file-when-gitlab-runner-fetch/:0:0","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2023/11/preserve-file-when-gitlab-runner-fetch/#"},{"categories":["CI/CD"],"content":" 解決方式","date":"2023-11-23","objectID":"/2023/11/preserve-file-when-gitlab-runner-fetch/:1:0","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2023/11/preserve-file-when-gitlab-runner-fetch/#解決方式"},{"categories":["CI/CD"],"content":" 1. 使用 cache 機制在 job 中設定好 cache，可以讓指定目錄或檔案於 jobs 之間互相參考，缺點是如果 Runner 沒有啟用，或是超過 Runner cache 設定的上限就無法使用，另外 cache 只能在同一個 pipeline 中使用 ","date":"2023-11-23","objectID":"/2023/11/preserve-file-when-gitlab-runner-fetch/:1:1","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2023/11/preserve-file-when-gitlab-runner-fetch/#1-使用-cache-機制"},{"categories":["CI/CD"],"content":" 2. 把專案要保留的東西複製到外部缺點是會污染 Runner 之外的環境 ","date":"2023-11-23","objectID":"/2023/11/preserve-file-when-gitlab-runner-fetch/:1:2","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2023/11/preserve-file-when-gitlab-runner-fetch/#2-把專案要保留的東西複製到外部"},{"categories":["CI/CD"],"content":" 3. 設定 GIT_CLEAN_FLAGS 排除指定目標被清除GitLab Runner 11.10 版以後提供可覆寫 git clean 執行時的參數，在 variables 加上 GIT_CLEAN_FLAGS 未指定時，git clean 預設使用 -ffdx 指定為 none 時，不執行 git clean 另外也可以設定自己想要的參數，例如設定要排除的目標: -e \u003cpattern\u003e yaml # 排除 Library 目錄被 clean 掉 variables: GIT_CLEAN_FLAGS: -ffdx -e [Ll]ibrary/ \u003cpattern\u003e 請參考 git clean 說明 ","date":"2023-11-23","objectID":"/2023/11/preserve-file-when-gitlab-runner-fetch/:1:3","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2023/11/preserve-file-when-gitlab-runner-fetch/#3-設定-git_clean_flags-排除指定目標被清除"},{"categories":["CI/CD"],"content":" Reference https://docs.gitlab.com/ee/ci/runners/configure_runners.html#git-clean-flags https://git-scm.com/docs/git-clean ","date":"2023-11-23","objectID":"/2023/11/preserve-file-when-gitlab-runner-fetch/:2:0","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2023/11/preserve-file-when-gitlab-runner-fetch/#reference"},{"categories":["dotnet"],"content":"因一些需求需要使用等寬字型(monospace)，除了直接指定字型名稱外，可以使用 System.Drawing.FontFamily.GenericMonospace 來用系統內建的等寬字型 csharp public partial class MyControl : UserControl { public MyControl() { InitializeComponent(); this.Font = new System.Drawing.Font(System.Drawing.FontFamily.GenericMonospace, 8); } } 參考: https://learn.microsoft.com/zh-tw/dotnet/api/system.drawing.fontfamily.genericmonospace ","date":"2023-10-22","objectID":"/2023/10/use-monosapce-font-in-windows-form/:0:0","series":null,"tags":["VisualStudio","dotnet"],"title":"Windows Form 使用等寬字型","uri":"/2023/10/use-monosapce-font-in-windows-form/#"},{"categories":["VisualStudio"],"content":"VS語系設中文的時候還有，切換成英文的時候就不見了 檢查 C:\\Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework\\.NETFramework\\v4.0 目錄 裡面沒有 xml 文件，但 zh-Hant 裡面有 xml 文件 根據 StackOverflow 上查到的資料，下載 Windows SDK for Windows 7 and .NET Framework 4，Win10 x64 請下載 GRMSDKX_EN_DVD.iso 下載後解壓縮，執行 Setup/SDKSetup.exe，安裝元件勾選 Intellisense and Reference Assemblies 安裝完後再次檢查上述目錄，就出現對應的 xml 文件了，這時再重開 .NET 4 專案，理論上就會出現文件說明 ","date":"2022-12-27","objectID":"/2022/12/visual-studio-missing-intellisense/:0:0","series":null,"tags":["VisualStudio","dotnet"],"title":"Visual Studio .NET Framework 4.0 專案 Intellisense 文件消失","uri":"/2022/12/visual-studio-missing-intellisense/#"},{"categories":["VisualStudio"],"content":" 4.5.2 文件消失參考 https://stackoverflow.com/a/58960895/1568102 下載 https://www.microsoft.com/en-us/download/details.aspx?id=42637 執行 text NDP452-KB2901951-x86-x64-DevPack.exe /lcid 1033 /uninstall 選擇 Repair ","date":"2022-12-27","objectID":"/2022/12/visual-studio-missing-intellisense/:1:0","series":null,"tags":["VisualStudio","dotnet"],"title":"Visual Studio .NET Framework 4.0 專案 Intellisense 文件消失","uri":"/2022/12/visual-studio-missing-intellisense/#452-文件消失"},{"categories":["CI/CD"],"content":"Automate unit testing with GitLab CI","date":"2022-03-31","objectID":"/2022/03/gitlab-ci-test-automation/","series":null,"tags":["CI/CD","GitLab","UnitTest","NUnit"],"title":"GitLab CI 建立自動化執行 Unit Testing (NUnit)","uri":"/2022/03/gitlab-ci-test-automation/"},{"categories":["CI/CD"],"content":"記錄一下 GitLab CI 自動跑 Unit Test 的步驟，有踩了一些小坑 ","date":"2022-03-31","objectID":"/2022/03/gitlab-ci-test-automation/:0:0","series":null,"tags":["CI/CD","GitLab","UnitTest","NUnit"],"title":"GitLab CI 建立自動化執行 Unit Testing (NUnit)","uri":"/2022/03/gitlab-ci-test-automation/#"},{"categories":["CI/CD"],"content":" 環境 .NET 4.5 專案 NUnit 3.13.3 GitLab 12.x ","date":"2022-03-31","objectID":"/2022/03/gitlab-ci-test-automation/:1:0","series":null,"tags":["CI/CD","GitLab","UnitTest","NUnit"],"title":"GitLab CI 建立自動化執行 Unit Testing (NUnit)","uri":"/2022/03/gitlab-ci-test-automation/#環境"},{"categories":["CI/CD"],"content":" NUnit Console 執行測試nuget 加入 NUnit.Console 參考，就可以用 Console 跑測試 安裝完成後執行檔應該會在以下路徑 batch %USERPROFILE%\\.nuget\\packages\\nunit.consolerunner\\[Version]\\tools\\nunit3-console.exe 如果沒有的話可能會在專案目錄下面 batch .\\packages\\nunit.consolerunner\\[Version]\\tools\\nunit3-console.exe 執行測試 batch set NUNIT_CONSOLE=%USERPROFILE%\\.nuget\\packages\\nunit.consolerunner\\3.15.0\\tools\\nunit3-console.exe \"%NUNIT_CONSOLE%\" \"Path\\To\\UnitTest.MyProject.dll\" --work=.\\TestResult 會在 .\\TestResult 產生 TestResult.xml ","date":"2022-03-31","objectID":"/2022/03/gitlab-ci-test-automation/:2:0","series":null,"tags":["CI/CD","GitLab","UnitTest","NUnit"],"title":"GitLab CI 建立自動化執行 Unit Testing (NUnit)","uri":"/2022/03/gitlab-ci-test-automation/#nunit-console-執行測試"},{"categories":["CI/CD"],"content":" 加入自動化測試GitLab CI 只支援 junit 格式的 test report，所以需要先將 NUnit 3 格式的 report 轉檔 下載 https://github.com/nunit/nunit-transforms/blob/master/nunit3-junit/nunit3-junit.xslt 放到專案目錄中 nunit-console 加入以下參數 txt --result=junit-results.xml;transform=nunit3-junit.xslt GitLab CI 設定檔將 .\\TestResult\\junit-results.xml 加入 artifacts:reports:junit 設定 .gitlab-ci.yml 範例 yml stages: - build - test build_job: stage: build variables: GIT_STRATEGY: fetch before_script: - 'CHCP 65001' script: - 'msbuild \"MyProject.sln\" /t:Rebuild /p:Configuration=\"Release\" /p:Platform=\"Any CPU\"' tags: - DOTNET_BUILD only: refs: - branches artifacts: when: always paths: - UnitTest/UnitTest.MyProject/bin/Release/UnitTest.MyProject.dll expire_in: 1 week test_job: stage: test dependencies: - build_job variables: GIT_STRATEGY: fetch before_script: - 'CHCP 65001' script: - 'set NUNIT_CONSOLE=%USERPROFILE%\\.nuget\\packages\\nunit.consolerunner\\3.15.0\\tools\\nunit3-console.exe' - '\"%NUNIT_CONSOLE%\" \"UnitTest/UnitTest.MyProject/bin/Release/UnitTest.MyProject.dll\" --config=Release --work=.\\TestResult --result=TestResult.xml --result=junit-results.xml;transform=nunit3-junit.xslt' tags: - DOTNET_BUILD only: refs: - branches artifacts: when: always paths: - TestResult/junit-results.xml - TestResult/TestResult.xml reports: junit: TestResult/junit-results.xml expire_in: 1 week 成功的話，每次 push 上去應該會觸發 Pipeline，Runner會建置專案並自動跑測試，最後能在介面上查看測試結果 ","date":"2022-03-31","objectID":"/2022/03/gitlab-ci-test-automation/:3:0","series":null,"tags":["CI/CD","GitLab","UnitTest","NUnit"],"title":"GitLab CI 建立自動化執行 Unit Testing (NUnit)","uri":"/2022/03/gitlab-ci-test-automation/#加入自動化測試"},{"categories":["CI/CD"],"content":" Reference NUnit Console 參數 GitLab CI Test Report ","date":"2022-03-31","objectID":"/2022/03/gitlab-ci-test-automation/:4:0","series":null,"tags":["CI/CD","GitLab","UnitTest","NUnit"],"title":"GitLab CI 建立自動化執行 Unit Testing (NUnit)","uri":"/2022/03/gitlab-ci-test-automation/#reference"},{"categories":["UnitTest"],"content":"Unit Testing gracefully with legacy code notes","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/"},{"categories":["UnitTest"],"content":"報名上了 91 的單元測試課程，把還有印象的東西寫下來，看能不能順利的在平常 coding 的時候用上 XD ","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/:0:0","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/#"},{"categories":["UnitTest"],"content":" 確認需求 你理解的跟我理解的是否一樣? 可以故意舉有問題的情境，讓 PM 一起思考這個需求雙方理解是否一致 API 對外參數越少越好，對外面來說，知道越少事就能達到相同的事會比較輕鬆 ","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/:1:0","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/#確認需求"},{"categories":["UnitTest"],"content":" isolated unit test 測試目標 (SUT, System Under Test / CUT, Class Under Test) 隔絕依賴，只測試單一功能 Extract and override 不適用 static class/method 不適用不能繼承的類別 找到外部依賴 抽離成 protect virtual method (可 override) 繼承 SUT，override method，fake 外部依賴 用子類別執行測試 很久以前的 Example ","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/:2:0","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/#isolated-unit-test"},{"categories":["UnitTest"],"content":" 重構測試 SUT 抽離成 field，放 [SetUp] method 依賴假物件，也要抽 field 放 [SetUp] method csharp private FakeHoliday _holiday; [SetUp] public void SetUp() { this._holiday = new FakeHoliday(); } 可精準描述該測試情境 測試裡面應該只有情境 就算更換 test framework，test code 應該不需要更動 GivenXXX, OOOShouldBeXXXX csharp [Test] public void today_is_xmas() { GiveToday(12, 25); SayHelloShouldReturn(\"Today is Christmas\"); } ","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/:3:0","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/#重構測試"},{"categories":["UnitTest"],"content":" 測試方式 Stub 模擬外部相依物件的行為，讓測試可繼續下去 Mock 驗證外部相依物件的互動，先定義好結果，再執行 SUT 的動作 只要跟定義不一樣，其餘行為都會報錯 Spy 驗證外部相依物件的互動，先執行 SUT 動作，再驗證是不是正確的行為 只驗證你想驗證的互動 ","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/:4:0","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/#測試方式"},{"categories":["UnitTest"],"content":" 什麼時候要做測試 ROI(投資報酬率)高的 金流 Security 商譽 有發生過 bug 需要測試案例 Code Coverage 使用方式 ","date":"2022-03-29","objectID":"/2022/03/91-unit-test-course-notes/:5:0","series":null,"tags":["UnitTest","LegacyCode"],"title":"針對遺留代碼加入單元測試的藝術 課後筆記","uri":"/2022/03/91-unit-test-course-notes/#什麼時候要做測試"},{"categories":["CI/CD"],"content":"GitLab runner on windows can not run npm command more than two times","date":"2022-02-25","objectID":"/2022/02/gitlab-cant-npm-on-windows/","series":null,"tags":["GitLab","NodeJS","npm","CI/CD"],"title":"GitLab Runner 在 Windows cmd 環境沒辦法執行兩句以上的 npm 指令","uri":"/2022/02/gitlab-cant-npm-on-windows/"},{"categories":["CI/CD"],"content":"使用 GitLab 跑 nodejs 專案遇到 script 執行不完全的問題 GitLab Runner 版本: 13.9.0 執行環境是 Win10 x64，Executor 為 Shell (CMD) .gitlab-ci.yml 內容如下 yml build_job: stage: build script: - npm install - npm run build cache: paths: - node_modules/ artifacts: paths: - build/* 執行 Log txt Executing \"step_script\" stage of the job script $ npm install up to date, audited 234 packages in 978ms 17 packages are looking for funding run `npm fund` for details found 0 vulnerabilities Saving cache for successful job 00:03 Creating cache default... Runtime platform arch=amd64 os=windows pid=12496 revision=4aae0f02 version=13.9.0~beta.104.g4aae0f02 node_modules/: found 4295 matching files and directories No URL provided, cache will be not uploaded to shared cache server. Cache will be stored only locally. Created cache Uploading artifacts for successful job 00:00 Uploading artifacts... Runtime platform arch=amd64 os=windows pid=9576 revision=4aae0f02 version=13.9.0~beta.104.g4aae0f02 WARNING: build/*: no matching files ERROR: No files to upload Cleaning up file based variables 00:01 Job succeeded 可以看到只執行了 npm install 就結束工作了，搜尋了一下發現也有人遇到一樣的問題 目前的 workaround 是用 call 去呼叫 npm yml build_job: script: - call npm install - call npm run build ","date":"2022-02-25","objectID":"/2022/02/gitlab-cant-npm-on-windows/:0:0","series":null,"tags":["GitLab","NodeJS","npm","CI/CD"],"title":"GitLab Runner 在 Windows cmd 環境沒辦法執行兩句以上的 npm 指令","uri":"/2022/02/gitlab-cant-npm-on-windows/#"},{"categories":["CI/CD"],"content":" 後記Windows Batch 已經被 Gitlab Runner 標記為 deprecated 了，不過因為環境的關係我們還是暫時用 cmd 來執行 runner，之後有機會的話再把環境改成 powershell In GitLab 11.11, we announced the deprecation of the Windows Batch executor, cmd shell, for the GitLab Runner in favor of PowerShell. The cmd shell remains included in future versions of GitLab Runner however, any new feature for Windows is to be tested and supported only for use with PowerShell. Only critical bugs and regressions to the cmd shell will be investigated and fixed. ","date":"2022-02-25","objectID":"/2022/02/gitlab-cant-npm-on-windows/:1:0","series":null,"tags":["GitLab","NodeJS","npm","CI/CD"],"title":"GitLab Runner 在 Windows cmd 環境沒辦法執行兩句以上的 npm 指令","uri":"/2022/02/gitlab-cant-npm-on-windows/#後記"},{"categories":["CI/CD"],"content":" Reference https://gitlab.com/gitlab-org/gitlab-runner/-/issues/2730#note_39661770 ","date":"2022-02-25","objectID":"/2022/02/gitlab-cant-npm-on-windows/:2:0","series":null,"tags":["GitLab","NodeJS","npm","CI/CD"],"title":"GitLab Runner 在 Windows cmd 環境沒辦法執行兩句以上的 npm 指令","uri":"/2022/02/gitlab-cant-npm-on-windows/#reference"},{"categories":["CodeForFun"],"content":"C# program to print hello world without semicolon","date":"2022-02-23","objectID":"/2022/02/csharp-hello-world-without-semicolon/","series":null,"tags":["CodeForFun","csharp"],"title":"C#不使用 \";\" 實作 Hello World","uri":"/2022/02/csharp-hello-world-without-semicolon/"},{"categories":["CodeForFun"],"content":"看到別的語言的實作，也來試試看C#版的 基本思路應該是要放在沒有 ; 的語句裡面，像是 if(){} 或 while(){}，如果 method 有返回值的應該都可以簡單的呼叫就好，問題出在無返回值的 method ","date":"2022-02-23","objectID":"/2022/02/csharp-hello-world-without-semicolon/:0:0","series":null,"tags":["CodeForFun","csharp"],"title":"C#不使用 \";\" 實作 Hello World","uri":"/2022/02/csharp-hello-world-without-semicolon/#"},{"categories":["CodeForFun"],"content":" 1. 使用 System.Reflection第一個想到的就是用反射呼叫 Invoke(object, object[])，把 void method 轉成有回傳值的 csharp class Program { static int Main() { if(typeof(System.Console).GetMethod(nameof(System.Console.WriteLine), new System.Type[] { typeof(string) }).Invoke(null, new object[] { \"Hello World\" })) {} } } ","date":"2022-02-23","objectID":"/2022/02/csharp-hello-world-without-semicolon/:1:0","series":null,"tags":["CodeForFun","csharp"],"title":"C#不使用 \";\" 實作 Hello World","uri":"/2022/02/csharp-hello-world-without-semicolon/#1-使用-systemreflection"},{"categories":["CodeForFun"],"content":" 2. 使用 AsyncWaitHandle.WaitOne轉成 System.Action\u003cstring\u003e 後，用非同步的方式執行，再用 WaitOne 等待他執行完 csharp class Program { static int Main() { if(((System.Action\u003cstring\u003e)System.Console.WriteLine) .BeginInvoke(\"Hello World\", null, null).AsyncWaitHandle.WaitOne()) {} } } ","date":"2022-02-23","objectID":"/2022/02/csharp-hello-world-without-semicolon/:2:0","series":null,"tags":["CodeForFun","csharp"],"title":"C#不使用 \";\" 實作 Hello World","uri":"/2022/02/csharp-hello-world-without-semicolon/#2-使用-asyncwaithandlewaitone"},{"categories":["CodeForFun"],"content":" 3. 使用 is 檢查這個是網路上查到的，我覺得最直覺的方法 XD，缺點是會跳 CS0184 警告，可以用 #pragma warning disable CS0184 隱藏起來 csharp #pragma warning disable CS0184 class Program { static int Main() { if(System.Console.WriteLine(\"Hello World\") is object) { } } } ","date":"2022-02-23","objectID":"/2022/02/csharp-hello-world-without-semicolon/:3:0","series":null,"tags":["CodeForFun","csharp"],"title":"C#不使用 \";\" 實作 Hello World","uri":"/2022/02/csharp-hello-world-without-semicolon/#3-使用-is-檢查"},{"categories":["git"],"content":"Git warning: auto-detection of host provider took too long","date":"2022-02-23","objectID":"/2022/02/git-remote-operation-warning/","series":null,"tags":["git"],"title":"Git 遠端操作出現 warning: auto-detection of host provider took too long","uri":"/2022/02/git-remote-operation-warning/"},{"categories":["git"],"content":"最近更新 git for windows 到 2.34.1 之後，執行 fetch/pull/push 等遠端操作都會出現警告訊息，執行時間也變久，紀錄一下怎麼處理這個問題的 ","date":"2022-02-23","objectID":"/2022/02/git-remote-operation-warning/:0:0","series":null,"tags":["git"],"title":"Git 遠端操作出現 warning: auto-detection of host provider took too long","uri":"/2022/02/git-remote-operation-warning/#"},{"categories":["git"],"content":" 原因執行 git pull 時發現有警告訊息 txt $ git pull warning: auto-detection of host provider took too long (\u003e2000ms) warning: see https://aka.ms/gcmcore-autodetect for more information. warning: auto-detection of host provider took too long (\u003e2000ms) warning: see https://aka.ms/gcmcore-autodetect for more information. warning: auto-detection of host provider took too long (\u003e2000ms) warning: see https://aka.ms/gcmcore-autodetect for more information. Already up to date. git 某一版(懶的找是哪一版了)更新後加入這個偵測 host provider 的功能，但因為公司是自架 git host，而且沒有連外網路，所以 git 可能就無法偵測 ","date":"2022-02-23","objectID":"/2022/02/git-remote-operation-warning/:1:0","series":null,"tags":["git"],"title":"Git 遠端操作出現 warning: auto-detection of host provider took too long","uri":"/2022/02/git-remote-operation-warning/#原因"},{"categories":["git"],"content":" 解法手動把 git provider 設定為 generic，他就不會去檢查那個 server 了 sh git config --global credential.xxx.example.com.provider generic 或是 .gitconfig 加入 ini [credential \"https://xxx.example.com\"] provider = generic ","date":"2022-02-23","objectID":"/2022/02/git-remote-operation-warning/:2:0","series":null,"tags":["git"],"title":"Git 遠端操作出現 warning: auto-detection of host provider took too long","uri":"/2022/02/git-remote-operation-warning/#解法"},{"categories":["git"],"content":" Reference https://github.com/GitCredentialManager/git-credential-manager/blob/main/docs/configuration.md#credentialprovider https://stackoverflow.com/a/69575498 https://stackoverflow.com/a/69992938 ","date":"2022-02-23","objectID":"/2022/02/git-remote-operation-warning/:3:0","series":null,"tags":["git"],"title":"Git 遠端操作出現 warning: auto-detection of host provider took too long","uri":"/2022/02/git-remote-operation-warning/#reference"},{"categories":["Android"],"content":"Android Emulator no response","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/"},{"categories":["Android"],"content":"升級 Flutter 後，要啟動 Android 模擬器，卻無回應，記錄一下怎麼處理這個問題的 ","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:0:0","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#"},{"categories":["Android"],"content":" 問題啟動模擬器後會卡在這個讀取畫面 ","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:1:0","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#問題"},{"categories":["Android"],"content":" 嘗試解法 (失敗) 到 Android Virtual Device Manager 刪除裝置並重建 到 SDK Managr 更新 Android API 及相關 Tools ","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:2:0","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#嘗試解法-失敗"},{"categories":["Android"],"content":" 可能可以用的解法 到 [控制台]-\u003e[程式和功能]-\u003e[開啟或關閉 Windows 功能]，將 [Hyper-V]-\u003e[Hyper-V 平台] 底下的項目都先取消，並重開機 安裝 Intel HAXM (位在 %ANDROID_SDK_ROOT%/extras/intel/Hardware_Accelerated_Execution_Manager) 若無法安裝 Intel HAXM (The System requirements are not satisfied.) 可試試看用指令將 Hyper-V 停用，重開機後再安裝看看 powershell bcdedit /set hypervisorlaunchtype off 目前做了上面的步驟後 Android Emulator 就打的開了 ","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:3:0","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#可能可以用的解法"},{"categories":["Android"],"content":" 其他問題","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:4:0","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#其他問題"},{"categories":["Android"],"content":" Android Emulator 可以開但 WSL 打不開WSL 需要 Hyper-V 啟用，目前測試再把 Hyper-V 重新啟用後，也可以正常開 WSL 跟 Android Emulator powershell bcdedit /set hypervisorlaunchtype auto ","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:4:1","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#android-emulator-可以開但-wsl-打不開"},{"categories":["Android"],"content":" 20220303 更新後來似乎只要 dart 或 flutter 有更新，就會再次發生，目前測試只要先把 Hyper-V 停用 -\u003e 重開機，就可以打開 Android 模擬器，然後再重新打開 Hyper-V 就好了 ","date":"2022-02-23","objectID":"/2022/02/android-emulator-no-response/:5:0","series":null,"tags":["Android","Flutter","WSL","Win10"],"title":"Android Emulator 啟動無回應","uri":"/2022/02/android-emulator-no-response/#20220303-更新"},{"categories":["VisualStudio"],"content":"Add Run as Administrator command to the context menu of *.sln files","date":"2022-02-16","objectID":"/2022/02/context-menu-open-sln-as-admin/","series":null,"tags":["VisualStudio","Win10"],"title":"Visual Studio 2019 使用系統管理員身分打開方案檔 (*.sln)","uri":"/2022/02/context-menu-open-sln-as-admin/"},{"categories":["VisualStudio"],"content":"有些專案的程式需要用系統管理員權限才能執行，以往都是先用系統管理員身分打開 Visual Studio，再手動打開方案，查了之後才發現有方法可以直接對方案檔以系統管理員身分打開 打開登錄編輯程式，新增機碼 HKEY_CLASSES_ROOT\\VisualStudio.sln.267dcece\\shell\\RunAs\\Command，預設值 \"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\[VS Version]\\Common7\\IDE\\devenv.exe\" \"%1\" 其中 [VS Version] 替換為 Visual Studio 的版本，比如說 Community 或 Enterprise 或是把下面內容另存成 xxx.reg，再雙擊執行 reg Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\VisualStudio.sln.267dcece\\shell\\RunAs] [HKEY_CLASSES_ROOT\\VisualStudio.sln.267dcece\\shell\\RunAs\\command] @=\"\\\"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\2019\\\\Community\\\\Common7\\\\IDE\\\\devenv.exe\\\" \\\"%1\\\"\" 重新開機後，工作列對 Visual Studio Icon 按右鍵的專案選單，或是檔案總管對 .sln 檔按右鍵的選單都會出現 以系統管理員身分執行 Explorer 右鍵選單 工作列右鍵選單 ","date":"2022-02-16","objectID":"/2022/02/context-menu-open-sln-as-admin/:0:0","series":null,"tags":["VisualStudio","Win10"],"title":"Visual Studio 2019 使用系統管理員身分打開方案檔 (*.sln)","uri":"/2022/02/context-menu-open-sln-as-admin/#"},{"categories":["VisualStudio"],"content":" Reference https://stackoverflow.com/a/43942660/1568102 ","date":"2022-02-16","objectID":"/2022/02/context-menu-open-sln-as-admin/:1:0","series":null,"tags":["VisualStudio","Win10"],"title":"Visual Studio 2019 使用系統管理員身分打開方案檔 (*.sln)","uri":"/2022/02/context-menu-open-sln-as-admin/#reference"},{"categories":["cocos"],"content":"Cocos Component Circular Reference warning","date":"2021-10-30","objectID":"/2021/10/cocos-component-circular-reference/","series":null,"tags":["cocos","typescript"],"title":"Cocos Component Circular Reference 警告","uri":"/2021/10/cocos-component-circular-reference/"},{"categories":["cocos"],"content":"用之前 Unity 經驗在寫 cocos 元件的時候遇到一堆警告，搞了老半天才發現是怎麼回事 當有繼承 Component 的類別互相引用對方，其類別屬性是對方類別且宣告成 @property()，可能就會發生以下錯誤 text [Scene] Found possible circular reference in \"pack:///mods/fs/0/assets/MyComponentB.js\", happened when use \"MyComponentA\" imported from \"./MyComponentA\" Error [Scene] You are explicitly specifying `undefined` type to cc property \"_a\" of cc class \"MyComponentB\". [Scene] Please specifiy a default value for \"MyComponentB._a\" property at its declaration: ","date":"2021-10-30","objectID":"/2021/10/cocos-component-circular-reference/:0:0","series":null,"tags":["cocos","typescript"],"title":"Cocos Component Circular Reference 警告","uri":"/2021/10/cocos-component-circular-reference/#"},{"categories":["cocos"],"content":" 範例 typescript // MyComponentA.ts import { Component, _decorator } from 'cc'; import { MyComponentB } from './MyComponentB'; const { ccclass, property } = _decorator; @ccclass('MyComponentA') export class MyComponentA extends Component { @property({ type: MyComponentB }) private _b!: MyComponentB; } typescript // MyComponentB.ts import { Component, _decorator } from 'cc'; import { MyComponentA } from './MyComponentA'; const { ccclass, property } = _decorator; @ccclass('MyComponentB') export class MyComponentB extends Component { @property({ type: MyComponentA }) private _a!: MyComponentA; } ","date":"2021-10-30","objectID":"/2021/10/cocos-component-circular-reference/:1:0","series":null,"tags":["cocos","typescript"],"title":"Cocos Component Circular Reference 警告","uri":"/2021/10/cocos-component-circular-reference/#範例"},{"categories":["cocos"],"content":" 解法將其中一個類別另外寫一個 interface，@property 的型別改成 Node，再用 Node.getComponent(className: string) 的方式去取得對方元件即可 在 MyComponentB.ts 加入 typescript export interface IMyComponentB extends MyComponentB { } MyComponentA.ts 修改為 typescript import { Component, Node, _decorator } from 'cc'; import { IMyComponentB } from './MyComponentB'; const { ccclass, property } = _decorator; @ccclass('MyComponentA') export class MyComponentA extends Component { @property({ type: Node }) private _bNode!: Node; private _b: IMyComponentB | null = null; get b(): IMyComponentB { if (this._b == null) { this._b = this._bNode.getComponent('MyComponentB') as IMyComponentB } return this._b; } } ","date":"2021-10-30","objectID":"/2021/10/cocos-component-circular-reference/:2:0","series":null,"tags":["cocos","typescript"],"title":"Cocos Component Circular Reference 警告","uri":"/2021/10/cocos-component-circular-reference/#解法"},{"categories":["cocos"],"content":" Reference https://discuss.cocos2d-x.org/t/circular-dependency-referencing-in-typescript/51377/6 ","date":"2021-10-30","objectID":"/2021/10/cocos-component-circular-reference/:3:0","series":null,"tags":["cocos","typescript"],"title":"Cocos Component Circular Reference 警告","uri":"/2021/10/cocos-component-circular-reference/#reference"},{"categories":["Windows"],"content":"Get file hash by certutil in Win10","date":"2021-10-22","objectID":"/2021/10/calc-hash-in-win10/","series":null,"tags":["Windows","Win10"],"title":"在 Win10 中計算檔案 hash 值","uri":"/2021/10/calc-hash-in-win10/"},{"categories":["Windows"],"content":"Linux 下可以用 md5sum 或 sha1sum 來計算 hash，現在 Win10 也有內建工具 certutil 可以用了。 ","date":"2021-10-22","objectID":"/2021/10/calc-hash-in-win10/:0:0","series":null,"tags":["Windows","Win10"],"title":"在 Win10 中計算檔案 hash 值","uri":"/2021/10/calc-hash-in-win10/#"},{"categories":["Windows"],"content":" 指令 batch certutil -hashfile \u003cFileName\u003e [HashAlgorithm] 其中 HashAlgorithm 支援 MD2 MD4 MD5 SHA1 SHA256 SHA384 SHA512 ","date":"2021-10-22","objectID":"/2021/10/calc-hash-in-win10/:1:0","series":null,"tags":["Windows","Win10"],"title":"在 Win10 中計算檔案 hash 值","uri":"/2021/10/calc-hash-in-win10/#指令"},{"categories":["Windows"],"content":" 範例 ","date":"2021-10-22","objectID":"/2021/10/calc-hash-in-win10/:2:0","series":null,"tags":["Windows","Win10"],"title":"在 Win10 中計算檔案 hash 值","uri":"/2021/10/calc-hash-in-win10/#範例"},{"categories":["Windows"],"content":" Reference https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/certutil#-hashfile https://hackmd.io/@Not/rkh6ff5nd https://blog.darkthread.net/blog/compute-file-hash-in-win/ ","date":"2021-10-22","objectID":"/2021/10/calc-hash-in-win10/:3:0","series":null,"tags":["Windows","Win10"],"title":"在 Win10 中計算檔案 hash 值","uri":"/2021/10/calc-hash-in-win10/#reference"},{"categories":["OBS","LiveStream"],"content":"OBS GStreamer source","date":"2021-05-20","objectID":"/2021/05/obs-gstreamer-note/","series":null,"tags":["GStreamer","OBS"],"title":"OBS GStreamer 筆記","uri":"/2021/05/obs-gstreamer-note/"},{"categories":["OBS","LiveStream"],"content":"有需求要在 OBS 中加入 RTSP 的來源，用 VLC source 或是內建的 Media Source 延遲都滿高的，找了一下發現有人做了 GStreamer 的 plugin，Latency 可以降到很低 ","date":"2021-05-20","objectID":"/2021/05/obs-gstreamer-note/:0:0","series":null,"tags":["GStreamer","OBS"],"title":"OBS GStreamer 筆記","uri":"/2021/05/obs-gstreamer-note/#"},{"categories":["OBS","LiveStream"],"content":" GStreamer binary Windows ","date":"2021-05-20","objectID":"/2021/05/obs-gstreamer-note/:1:0","series":null,"tags":["GStreamer","OBS"],"title":"OBS GStreamer 筆記","uri":"/2021/05/obs-gstreamer-note/#gstreamer-binary"},{"categories":["OBS","LiveStream"],"content":" OBS Studio GStreamer source plugin obs-gstreamer ","date":"2021-05-20","objectID":"/2021/05/obs-gstreamer-note/:2:0","series":null,"tags":["GStreamer","OBS"],"title":"OBS GStreamer 筆記","uri":"/2021/05/obs-gstreamer-note/#obs-studio-gstreamer-source-plugin"},{"categories":["OBS","LiveStream"],"content":" GStreamer RTSP source pipeline (for OBS)rtspsrc 是 RTSP 來源，latency=0 可以讓延遲減少到最小，protocols=tcp 是強制使用 TCP 傳輸，經測試長時間跑 UDP 傳輸可能會發生解碼失敗的問題 video. 是 obs-gstreamer plugin 使用的 sink 使用 decodebin txt rtspsrc location=rtsp://192.168.1.168:554/stream latency=0 protocols=tcp ! rtpjitterbuffer latency=0 ! watchdog timeout=10000 ! decodebin ! queue ! video. decodebin 預設應該是用 CPU 解碼，如果要指定解碼器, 可以手動選擇，但要先用 gst-inspect 查詢看看有沒有支援 使用自定 decoder，使用前需用 rtph264depay 及 h264parse 處理 txt rtspsrc location=rtsp://192.168.1.168:554/stream latency=0 protocols=tcp ! rtpjitterbuffer latency=0 ! rtph264depay ! h264parse ! avdec_h264 ! video. 其中 avdec_h264 可使用其他 decoder 替換，目前測試可以用的有 avdec_h264 nvh264dec d3d11h264dec openh264dec ","date":"2021-05-20","objectID":"/2021/05/obs-gstreamer-note/:3:0","series":null,"tags":["GStreamer","OBS"],"title":"OBS GStreamer 筆記","uri":"/2021/05/obs-gstreamer-note/#gstreamer-rtsp-source-pipeline-for-obs"},{"categories":["VisualStudio"],"content":"Visual Studio 2019 16.9 The 'CascadePackage' package did not load correctly error ","date":"2021-03-16","objectID":"/2021/03/vs2019-open-proj-error/","series":null,"tags":["VisualStudio"],"title":"Visual Studio 2019 16.9 打開專案跳錯誤","uri":"/2021/03/vs2019-open-proj-error/"},{"categories":["VisualStudio"],"content":"更新至 Visual Studio 2019 16.9 之後，打開專案會跳出 The 'CascadePackage' package did not load correctly 的錯誤 ","date":"2021-03-16","objectID":"/2021/03/vs2019-open-proj-error/:0:0","series":null,"tags":["VisualStudio"],"title":"Visual Studio 2019 16.9 打開專案跳錯誤","uri":"/2021/03/vs2019-open-proj-error/#"},{"categories":["VisualStudio"],"content":" 症狀 (圖片來源) ","date":"2021-03-16","objectID":"/2021/03/vs2019-open-proj-error/:1:0","series":null,"tags":["VisualStudio"],"title":"Visual Studio 2019 16.9 打開專案跳錯誤","uri":"/2021/03/vs2019-open-proj-error/#症狀"},{"categories":["VisualStudio"],"content":" 解決方式打開 Visual Studio Installer =\u003e 修改，切換到個別元件，搜尋 Live Share，取消勾選後按修改，等他更新後即可 ","date":"2021-03-16","objectID":"/2021/03/vs2019-open-proj-error/:2:0","series":null,"tags":["VisualStudio"],"title":"Visual Studio 2019 16.9 打開專案跳錯誤","uri":"/2021/03/vs2019-open-proj-error/#解決方式"},{"categories":["VisualStudio"],"content":" Reference https://developercommunity.visualstudio.com/t/the-cascadepackage-package-did-not-load-correctly-9/1342604 https://stackoverflow.com/a/66494411/1568102 ","date":"2021-03-16","objectID":"/2021/03/vs2019-open-proj-error/:3:0","series":null,"tags":["VisualStudio"],"title":"Visual Studio 2019 16.9 打開專案跳錯誤","uri":"/2021/03/vs2019-open-proj-error/#reference"},{"categories":["Windows"],"content":"Get desktop path using Windows Batch","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/"},{"categories":["Windows"],"content":"有個需求是要用 Batch file 在桌面上建立一些檔案，遍尋不著桌面路徑的環境變數，只好透過其他方式來取得桌面路徑 ","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/:0:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/#"},{"categories":["Windows"],"content":" 桌面路徑正常情況下的桌面路徑應該是 %UserProfile%\\Desktop\\，但僅限於英文語系的 Windows，有些語系桌面不是Desktop，另外像是有些人也會修改系統預設桌面路徑的位置，所以保險的方式應該是要從系統 API 去取得正確的路徑 ","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/:1:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/#桌面路徑"},{"categories":["Windows"],"content":" 使用 Regedit 取得桌面路徑 batch FOR /f \"usebackq tokens=1,2,*\" %%B IN (`REG QUERY \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" /v Desktop`) DO SET DESKTOPDIR=%%D FOR /F \"usebackq delims=\" %%i in (`ECHO %DESKTOPDIR%`) DO SET DESKTOPDIR=%%i ECHO %DESKTOPDIR% 系統桌面路徑會記錄在 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders 裡面，先查詢出 Desktop 的值後再把路徑展開來 ","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/:2:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/#使用-regedit-取得桌面路徑"},{"categories":["Windows"],"content":" 使用 Powershell 取得桌面路徑 batch FOR /F \"usebackq delims=\" %%i in (`powershell -Command \"\u0026 {[Environment]::GetFolderPath('Desktop')}\"`) DO SET DESKTOPDIR=%%i ECHO %DESKTOPDIR% 執行 powershell 命令 [Environment]::GetFolderPath('Desktop') 取得桌面路徑 ","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/:3:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/#使用-powershell-取得桌面路徑"},{"categories":["Windows"],"content":" 使用 VBScript 取得桌面路徑 batch SET FIND_DESKTOP_SCRIPT=%TEMP%\\%RANDOM%-%RANDOM%-%RANDOM%-%RANDOM%.vbs \u003e\"%FIND_DESKTOP_SCRIPT%\" ( ECHO set WshShell = WScript.CreateObject^(\"WScript.Shell\"^) ECHO strDesktop = WshShell.SpecialFolders^(\"Desktop\"^) ECHO WScript.Echo^(strDesktop^) ) FOR /F \"usebackq delims=\" %%i in (`cscript //nologo \"%FIND_DESKTOP_SCRIPT%\"`) DO SET DESKTOPDIR=%%i DEL \"%FIND_DESKTOP_SCRIPT%\" ECHO %DESKTOPDIR% 在 temp 目錄建立一個暫存的 VBScript 檔，用 VBScript 查詢桌面路徑後再刪除，注意輸出 vbs 檔的時候要 escape ( ) 字元 ","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/:4:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/#使用-vbscript-取得桌面路徑"},{"categories":["Windows"],"content":" Reference https://docs.microsoft.com/en-US/dotnet/api/system.environment.getfolderpath https://ss64.com/vb/special.html https://stackoverflow.com/a/34706178/1568102 https://stackoverflow.com/a/2643817/1568102 ","date":"2021-02-01","objectID":"/2021/02/windows-batch-get-desktop-path/:5:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch 取得桌面路徑的方法","uri":"/2021/02/windows-batch-get-desktop-path/#reference"},{"categories":["Windows"],"content":"Windows Batch echo number redirect to file","date":"2021-01-28","objectID":"/2021/01/windows-batch-echo-number-to-file/","series":null,"tags":["Windows","batch"],"title":"Windows Batch echo 數字到檔案","uri":"/2021/01/windows-batch-echo-number-to-file/"},{"categories":["Windows"],"content":"寫 batch 腳本時遇到的怪問題，將某些數字 echo redirect 到檔案時會消失不見 ","date":"2021-01-28","objectID":"/2021/01/windows-batch-echo-number-to-file/:0:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch echo 數字到檔案","uri":"/2021/01/windows-batch-echo-number-to-file/#"},{"categories":["Windows"],"content":" 狀況有個需求是要用 batch 將指定的字串寫入檔案 batch echo set NUMBER=4\u003efile.txt 最後得到的 file.txt 是空的 ","date":"2021-01-28","objectID":"/2021/01/windows-batch-echo-number-to-file/:1:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch echo 數字到檔案","uri":"/2021/01/windows-batch-echo-number-to-file/#狀況"},{"categories":["Windows"],"content":" 原因數字搭配 \u003e 或 \u003e\u003e Redirection 符號在 batch 中有特殊意義，詳見 How-to: Redirection Numeric handles: STDIN = 0 Keyboard input STDOUT = 1 Text output STDERR = 2 Error text output UNDEFINED = 3-9 ","date":"2021-01-28","objectID":"/2021/01/windows-batch-echo-number-to-file/:2:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch echo 數字到檔案","uri":"/2021/01/windows-batch-echo-number-to-file/#原因"},{"categories":["Windows"],"content":" 解法把 command 用 () 包起來後再 redirect 到檔案就可以了 batch (echo set NUMBER=4)\u003efile.txt 另外還學到可以一次 echo 多行，腳本看起來比較漂亮 batch ( echo set NUMBER=4 echo set TYPE=test echo set BUILD_PATH=D:\\output\\ )\u003efile.txt 或是 batch \u003efile.txt( echo set NUMBER=4 echo set TYPE=test echo set BUILD_PATH=D:\\output\\ ) ","date":"2021-01-28","objectID":"/2021/01/windows-batch-echo-number-to-file/:3:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch echo 數字到檔案","uri":"/2021/01/windows-batch-echo-number-to-file/#解法"},{"categories":["Windows"],"content":" Reference https://stackoverflow.com/a/37731008/1568102 https://ss64.com/nt/syntax-redirection.html ","date":"2021-01-28","objectID":"/2021/01/windows-batch-echo-number-to-file/:4:0","series":null,"tags":["Windows","batch"],"title":"Windows Batch echo 數字到檔案","uri":"/2021/01/windows-batch-echo-number-to-file/#reference"},{"categories":["git"],"content":"git checkout exclude files","date":"2021-01-11","objectID":"/2021/01/git-checkout-exclude-files/","series":null,"tags":["git"],"title":"git checkout 排除指定目錄/檔案","uri":"/2021/01/git-checkout-exclude-files/"},{"categories":["git"],"content":"跟別人共用的專案，有時候 checkout 的時候不需要把部分的東西一併取出來，可以節省 compile 時間，git 有提供 sparse checkout 的功能，可以指定或排除特定目錄/檔案 ","date":"2021-01-11","objectID":"/2021/01/git-checkout-exclude-files/:0:0","series":null,"tags":["git"],"title":"git checkout 排除指定目錄/檔案","uri":"/2021/01/git-checkout-exclude-files/#"},{"categories":["git"],"content":" 啟用 git sparse-checkout 啟用設定 shell git config core.sparseCheckout true 新增或編輯 .git/info/sparse-checkout，語法跟 .gitignore 一樣 bash # 所有目錄及檔案都要 checkout /* # 以下目錄不會被 checkout !/Assets/FolderNotCheckout !/Assets/FileNotCheckout.dat 更新 git 工作目錄 shell git read-tree -mu HEAD ","date":"2021-01-11","objectID":"/2021/01/git-checkout-exclude-files/:1:0","series":null,"tags":["git"],"title":"git checkout 排除指定目錄/檔案","uri":"/2021/01/git-checkout-exclude-files/#啟用-git-sparse-checkout"},{"categories":["git"],"content":" 停用 git sparse-checkout 停用設定 shell git config core.sparseCheckout false 清空 .git/info/sparse-checkout shell echo \"\" \u003e .git/info/sparse-checkout 更新 git 工作目錄 shell git read-tree -mu HEAD ","date":"2021-01-11","objectID":"/2021/01/git-checkout-exclude-files/:2:0","series":null,"tags":["git"],"title":"git checkout 排除指定目錄/檔案","uri":"/2021/01/git-checkout-exclude-files/#停用-git-sparse-checkout"},{"categories":["git"],"content":" Reference https://git-scm.com/docs/git-read-tree#_sparse_checkout https://stackoverflow.com/a/33934496/1568102 ","date":"2021-01-11","objectID":"/2021/01/git-checkout-exclude-files/:3:0","series":null,"tags":["git"],"title":"git checkout 排除指定目錄/檔案","uri":"/2021/01/git-checkout-exclude-files/#reference"},{"categories":["Hugo"],"content":"GitHub 在今年的 GitHub satellite 公佈了 Codespaces，經過一段時間的等待終於申請到試用了 拿來測試 Hugo 的 repository，結果居然有內建 Hugo XD shell $ uname -a Linux codespaces_93f23e 5.4.0-1031-azure #32~18.04.1-Ubuntu SMP Tue Oct 6 10:03:22 UTC 2020 x86_64 GNU/Linux $ hugo version Hugo Static Site Generator v0.71.0-06150C87/extended linux/amd64 BuildDate: 2020-05-18T16:15:29Z 想要測試 hugo 內建 server，預設會用 localhost 來建立網站，但外面連不到 txt $ hugo server -D . . . . Built in 620 ms Watching for changes in /home/codespace/workspace/HugoRepo/{archetypes,content,data,static,themes} Watching for config changes in /home/codespace/workspace/HugoRepo/config.toml Environment: \"development\" Serving pages from memory Running in Fast Render Mode. For full rebuilds on change: hugo server --disableFastRender Web Server is available at http://localhost:1313/ (bind address 127.0.0.1) Press Ctrl+C to stop 可以透過指定 baseURL 到 https://${CLOUDENV_ENVIRONMENT_ID}-1313.apps.codespaces.githubusercontent.com，就可以進行測試了 shell hugo server -D --baseURL https://${CLOUDENV_ENVIRONMENT_ID}-1313.apps.codespaces.githubusercontent.com --appendPort=false ","date":"2020-12-08","objectID":"/2020/12/hugo-with-github-codespaces/:0:0","series":null,"tags":["Codespaces","GitHub","Hugo","VSCode"],"title":"用 GitHub Codespaces 來操作 Hugo 網站","uri":"/2020/12/hugo-with-github-codespaces/#"},{"categories":["Hugo"],"content":" Reference https://ddulic.dev/github-codespaces-on-ipad https://www.isaaclevin.com/post/github-codespaces/ ","date":"2020-12-08","objectID":"/2020/12/hugo-with-github-codespaces/:1:0","series":null,"tags":["Codespaces","GitHub","Hugo","VSCode"],"title":"用 GitHub Codespaces 來操作 Hugo 網站","uri":"/2020/12/hugo-with-github-codespaces/#reference"},{"categories":["VSCode"],"content":"VSCode C# Extension got the .NETFramework 4.7.1 not found error when open mono project on MacOSX","date":"2020-11-22","objectID":"/2020/11/macos-vscode-mono-project-dotnet471-error/","series":null,"tags":["VSCode","Unity3D","MacOS"],"title":"MacOSX 上的 VSCode 開啟 mono 專案，C# Extension 跑出找不到 .NET Framework 4.7.1 的錯誤","uri":"/2020/11/macos-vscode-mono-project-dotnet471-error/"},{"categories":["VSCode"],"content":"MacOS 上要先安裝 .NET Core SDK 及 Mono 才能使用 VSCode 打開 mono/.NET 專案，但安裝後 VSCode 的 C# Extension 還是跳錯誤訊息 ","date":"2020-11-22","objectID":"/2020/11/macos-vscode-mono-project-dotnet471-error/:0:0","series":null,"tags":["VSCode","Unity3D","MacOS"],"title":"MacOSX 上的 VSCode 開啟 mono 專案，C# Extension 跑出找不到 .NET Framework 4.7.1 的錯誤","uri":"/2020/11/macos-vscode-mono-project-dotnet471-error/#"},{"categories":["VSCode"],"content":" 症狀VSCode 錯誤訊息如下 text [fail]: OmniSharp.MSBuild.ProjectLoader The reference assemblies for .NETFramework,Version=v4.7.1 were not found. To resolve this, install the Developer Pack (SDK/Targeting Pack) for this framework version or retarget your application. You can download .NET Framework Developer Packs at https://aka.ms/msbuild/developerpacks ","date":"2020-11-22","objectID":"/2020/11/macos-vscode-mono-project-dotnet471-error/:1:0","series":null,"tags":["VSCode","Unity3D","MacOS"],"title":"MacOSX 上的 VSCode 開啟 mono 專案，C# Extension 跑出找不到 .NET Framework 4.7.1 的錯誤","uri":"/2020/11/macos-vscode-mono-project-dotnet471-error/#症狀"},{"categories":["VSCode"],"content":" 解法VSCode 的延伸模組設定(Extension)，搜尋 Omnisharp: Use Global Mono，設定改為 always，重啟 OmniSharp 即可 ","date":"2020-11-22","objectID":"/2020/11/macos-vscode-mono-project-dotnet471-error/:2:0","series":null,"tags":["VSCode","Unity3D","MacOS"],"title":"MacOSX 上的 VSCode 開啟 mono 專案，C# Extension 跑出找不到 .NET Framework 4.7.1 的錯誤","uri":"/2020/11/macos-vscode-mono-project-dotnet471-error/#解法"},{"categories":["VSCode"],"content":" Reference https://github.com/OmniSharp/omnisharp-vscode/issues/3063#issuecomment-678223360 https://tkymx83.hatenablog.com/entry/2020/08/23/170913 ","date":"2020-11-22","objectID":"/2020/11/macos-vscode-mono-project-dotnet471-error/:3:0","series":null,"tags":["VSCode","Unity3D","MacOS"],"title":"MacOSX 上的 VSCode 開啟 mono 專案，C# Extension 跑出找不到 .NET Framework 4.7.1 的錯誤","uri":"/2020/11/macos-vscode-mono-project-dotnet471-error/#reference"},{"categories":["CI/CD"],"content":"Preserve file or folder when GitLab Runner did fetch job","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/"},{"categories":["CI/CD"],"content":"GitLab Runner 在 fetch 專案時，預設會在 fetch 後執行 git clean -ffdx 命令，讓專案目錄維持在乾淨的狀態 然而有時候我們會想要保留一些目錄或檔案，讓下次編譯時不需要重新產生以節省編譯時間 (例如 Unity 專案的 Library 目錄)，GitLab 有提供一些方式來達成這個目標 ","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/:0:0","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/#"},{"categories":["CI/CD"],"content":" 解決方式","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/:1:0","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/#解決方式"},{"categories":["CI/CD"],"content":" 1. 使用 cache 機制在 job 中設定好 cache，可以讓指定目錄或檔案於 jobs 之間互相參考，缺點是如果 Runner 沒有啟用，或是超過 Runner cache 設定的上限就無法使用，另外 cache 只能在同一個 pipeline 中使用 ","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/:1:1","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/#1-使用-cache-機制"},{"categories":["CI/CD"],"content":" 2. 把專案要保留的東西複製到外部缺點是會污染 Runner 之外的環境 ","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/:1:2","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/#2-把專案要保留的東西複製到外部"},{"categories":["CI/CD"],"content":" 3. 設定 GIT_CLEAN_FLAGS 排除指定目標被清除GitLab Runner 11.10 版以後提供可覆寫 git clean 執行時的參數，在 variables 加上 GIT_CLEAN_FLAGS 未指定時，git clean 預設使用 -ffdx 指定為 none 時，不執行 git clean 另外也可以設定自己想要的參數，例如設定要排除的目標: -e \u003cpattern\u003e yaml # 排除 Library 目錄被 clean 掉 variables: GIT_CLEAN_FLAGS: -ffdx -e [Ll]ibrary/ \u003cpattern\u003e 請參考 git clean 說明 ","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/:1:3","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/#3-設定-git_clean_flags-排除指定目標被清除"},{"categories":["CI/CD"],"content":" Reference https://docs.gitlab.com/11.11/ee/ci/yaml/README.html#git-clean-flags https://docs.gitlab.com/11.11/ee/ci/large_repositories/index.html#git-clean-flags https://git-scm.com/docs/git-clean ","date":"2020-11-18","objectID":"/2020/11/gitlab-runner-fetch-clean-exclude/:2:0","series":null,"tags":["GitLab","CI/CD"],"title":"GitLab Runner fetch 專案時保留指定目錄不被刪除","uri":"/2020/11/gitlab-runner-fetch-clean-exclude/#reference"},{"categories":["Windows"],"content":"Microsoft Store can't open, reinstall","date":"2020-11-16","objectID":"/2020/11/ms-store-reinstall/","series":null,"tags":["Windows","Win10"],"title":"Microsoft Store 打不開","uri":"/2020/11/ms-store-reinstall/"},{"categories":["Windows"],"content":"某次更新 Windows 10 後，Microsoft Store 怎麼點他都打不開，嘗試了一些方法都失敗，記錄一下有效的方法 ","date":"2020-11-16","objectID":"/2020/11/ms-store-reinstall/:0:0","series":null,"tags":["Windows","Win10"],"title":"Microsoft Store 打不開","uri":"/2020/11/ms-store-reinstall/#"},{"categories":["Windows"],"content":" 症狀Windows 動態磚上面顯示 Microsoft Store 的圖示變成這樣 ","date":"2020-11-16","objectID":"/2020/11/ms-store-reinstall/:1:0","series":null,"tags":["Windows","Win10"],"title":"Microsoft Store 打不開","uri":"/2020/11/ms-store-reinstall/#症狀"},{"categories":["Windows"],"content":" 解法 用系統管理員打開 powershell 執行以下命令 powershell Get-AppXPackage *WindowsStore* -AllUsers | Foreach {Add-AppxPackage -DisableDevelopmentMode -Register \"$($_.InstallLocation)\\AppXManifest.xml\"} 重新啟動電腦，Microsoft Store 應該就可以開了 ","date":"2020-11-16","objectID":"/2020/11/ms-store-reinstall/:2:0","series":null,"tags":["Windows","Win10"],"title":"Microsoft Store 打不開","uri":"/2020/11/ms-store-reinstall/#解法"},{"categories":["Windows"],"content":" Reference Windows Store Is Missing Microsoft Store 無法啟動 ","date":"2020-11-16","objectID":"/2020/11/ms-store-reinstall/:3:0","series":null,"tags":["Windows","Win10"],"title":"Microsoft Store 打不開","uri":"/2020/11/ms-store-reinstall/#reference"},{"categories":["Editor"],"content":"有時候我們需要把文件中某些特定字串改成另外的格式，以前我都是另外寫一隻程式去做字串處理，最近突然想到部分文字編輯器軟體有支援 Regular Expression 取代功能 (Notepad++, VSCode…)，這篇文章用來記錄 Notepad++ 的 regex 取代字串功能。 假設有一份 Log 檔，內容如下 txt 201013165206.637 |BOT|{Recv Command} 93;026; 201013165206.644 |BOT|{Send Command} 93;100; 201013165206.677 |DEBUG|[Manager] Save Image: /var/log/image/201013/xxx.img 201013165209.726 |BOT|Buffer=ABBCCDDDEEFFFGGG 201013165209.726 |BOT|{Recv Command} 94;021 ... 201013165209.741 |BOT|{Send Command} 94;100; 201013165209.742 |DEBUG|[Warning][10130010] Something error 201013165209.742 |DEBUG|[Manager] Clear Empty 4 201013165209.743 |DEBUG|[Manager] Clear complete 201013165209.779 |DEBUG|[Manager] Delete: /var/log/image/201012 201013165209.829 |DEBUG|[Manager] End Clear Old Data 其中每一列的最前面數字表示日期時間，格式為 yyMMddHHmmss.fff，需要把日期時間改為 yy/MM/dd HH:mm:ss.fff ","date":"2020-10-20","objectID":"/2020/10/notepad-plus-plus-regex-replace/:0:0","series":null,"tags":["NPP","Editor","VSCode","Regex"],"title":"Notepad++ 使用 Regex capture group 取代特定格式字串","uri":"/2020/10/notepad-plus-plus-regex-replace/#"},{"categories":["Editor"],"content":" 操作 用 Notepad++ 打開 Log CTRL+H 打開取代視窗 搜尋模式改為 規則運算式 尋找內容輸入 (\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2}).(\\d{3}) [|] 取代為輸入 \\1/\\2/\\3 \\4:\\5:\\6.\\7 | 按下全部取代 ","date":"2020-10-20","objectID":"/2020/10/notepad-plus-plus-regex-replace/:1:0","series":null,"tags":["NPP","Editor","VSCode","Regex"],"title":"Notepad++ 使用 Regex capture group 取代特定格式字串","uri":"/2020/10/notepad-plus-plus-regex-replace/#操作"},{"categories":["Editor"],"content":" 結果 取代前 取代後 ","date":"2020-10-20","objectID":"/2020/10/notepad-plus-plus-regex-replace/:2:0","series":null,"tags":["NPP","Editor","VSCode","Regex"],"title":"Notepad++ 使用 Regex capture group 取代特定格式字串","uri":"/2020/10/notepad-plus-plus-regex-replace/#結果"},{"categories":["Editor"],"content":" 說明使用 Regular Expression 的 group 把搜尋字串拆解開來，再用參考變數取代 text group (\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2}).(\\d{3}) 格式 yy MM dd HH mm ss fff 代表變數 \\1 \\2 \\3 \\4 \\5 \\6 \\7 其中變數 \\n 也可以寫成 \\{n}、$n、${n} ","date":"2020-10-20","objectID":"/2020/10/notepad-plus-plus-regex-replace/:3:0","series":null,"tags":["NPP","Editor","VSCode","Regex"],"title":"Notepad++ 使用 Regex capture group 取代特定格式字串","uri":"/2020/10/notepad-plus-plus-regex-replace/#說明"},{"categories":["Editor"],"content":" Reference Notepad++ Capture Groups and Backreferences Boost format syntax Notepad++ regex replace capture groups Visual Studio Capture groups and replacement patterns ","date":"2020-10-20","objectID":"/2020/10/notepad-plus-plus-regex-replace/:4:0","series":null,"tags":["NPP","Editor","VSCode","Regex"],"title":"Notepad++ 使用 Regex capture group 取代特定格式字串","uri":"/2020/10/notepad-plus-plus-regex-replace/#reference"},{"categories":["Linux"],"content":"用 SSH 連到遠端 Server 後，有時候需要取得自己的 IP 來做某些事 (比如說設定 DISPLAY 環境變數) 可以用 $SSH_CLIENT 或 $SSH_CONNECTION 取得連線資訊 shell $ echo $SSH_CLIENT \u003e 172.16.1.100 10360 22 shell $ echo $SSH_CONNECTION \u003e 172.16.1.100 10360 172.16.1.200 22 只列出 Client IP shell $ echo $SSH_CLIENT | awk '{ print $1}' \u003e 172.16.1.100 設定 DISPLAY 環境變數 shell $ export DISPLAY=`echo $SSH_CLIENT | awk '{ print $1}'`:0.0 $ echo $DISPLAY \u003e 172.16.1.100:0.0 ","date":"2020-10-04","objectID":"/2020/10/ssh-client-session-ip/:0:0","series":null,"tags":["SSH","Linux"],"title":"取得 SSH Session Client 的 IP","uri":"/2020/10/ssh-client-session-ip/#"},{"categories":["Linux"],"content":" Reference https://stackoverflow.com/questions/996231/find-the-ip-address-of-the-client-in-an-ssh-session ","date":"2020-10-04","objectID":"/2020/10/ssh-client-session-ip/:1:0","series":null,"tags":["SSH","Linux"],"title":"取得 SSH Session Client 的 IP","uri":"/2020/10/ssh-client-session-ip/#reference"},{"categories":["Unity3D"],"content":"Unity IL2CPP 中傳 deletage 給 Native plugin 遇到的錯誤","date":"2020-09-23","objectID":"/2020/09/unity-il2cpp-native-plugin-invoke/","series":null,"tags":["Unity3D","IL2CPP","dotnet","mono"],"title":"Unity IL2CPP 中傳 deletage 給 Native plugin","uri":"/2020/09/unity-il2cpp-native-plugin-invoke/"},{"categories":["Unity3D"],"content":"在 C# 傳 callback method 到 native plugin 裡面，會先包裝成 delegate，這次在執行的時候遇到 NotSupportedException ","date":"2020-09-23","objectID":"/2020/09/unity-il2cpp-native-plugin-invoke/:0:0","series":null,"tags":["Unity3D","IL2CPP","dotnet","mono"],"title":"Unity IL2CPP 中傳 deletage 給 Native plugin","uri":"/2020/09/unity-il2cpp-native-plugin-invoke/#"},{"categories":["Unity3D"],"content":" 症狀Code 如下 C++ side cpp typedef void (* CallbackFunc)(int val); extern \"C\"{ void PowOf2(int val, CallbackFunc callback) { val *= val; callback(val); } } C# side csharp delegate void PowOf2Delegate(int val); [DllImport(\"somelib\")] extern static void PowOf2(int val, PowOf2Delegate callback); private void Start() { PowOf2(10, PowOf2Callback); // \u003c\u003c NotSupportedException } private void PowOf2Callback(int val) { Debug.Log(val); } Script backend 選 mono 的時候可正常執行，但選擇 IL2CPP 的時候，執行到 PowOf2 的時候會丟出 NotSupportedException txt NotSupportedException: To marshal a managed method, please add an attribute named 'MonoPInvokeCallback' to the method definition. ","date":"2020-09-23","objectID":"/2020/09/unity-il2cpp-native-plugin-invoke/:1:0","series":null,"tags":["Unity3D","IL2CPP","dotnet","mono"],"title":"Unity IL2CPP 中傳 deletage 給 Native plugin","uri":"/2020/09/unity-il2cpp-native-plugin-invoke/#症狀"},{"categories":["Unity3D"],"content":" 解法把 callback method 改成 static，並在前面加上 MonoPInvokeCallback 宣告 csharp [MonoPInvokeCallback(typeof(PowOf2Delegate))] private static void PowOf2Callback(int val) { Debug.Log(val); } ","date":"2020-09-23","objectID":"/2020/09/unity-il2cpp-native-plugin-invoke/:2:0","series":null,"tags":["Unity3D","IL2CPP","dotnet","mono"],"title":"Unity IL2CPP 中傳 deletage 給 Native plugin","uri":"/2020/09/unity-il2cpp-native-plugin-invoke/#解法"},{"categories":["Unity3D"],"content":" Reference https://forum.unity.com/threads/making-calls-from-c-to-c-with-il2cpp-instead-of-mono_runtime_invoke.295697/ https://forum.unity.com/threads/help-with-aot-compilation-with-monopinvokecallback.717917/ https://shunzhitang.github.io/2019/03/iOS-iosRecord-Note/ ","date":"2020-09-23","objectID":"/2020/09/unity-il2cpp-native-plugin-invoke/:3:0","series":null,"tags":["Unity3D","IL2CPP","dotnet","mono"],"title":"Unity IL2CPP 中傳 deletage 給 Native plugin","uri":"/2020/09/unity-il2cpp-native-plugin-invoke/#reference"},{"categories":["dotnet"],"content":"Visual Studio 專案建置完成後取得組件版本號並輸出在文字檔中","date":"2020-07-14","objectID":"/2020/07/visual-studio-get-version-after-build/","series":null,"tags":["dotnet","VisualStudio"],"title":"Visual Studio 專案建置完成後取得組件版本號並輸出在文字檔中","uri":"/2020/07/visual-studio-get-version-after-build/"},{"categories":["dotnet"],"content":"接到一個需求，需要在專案編譯完成後，在執行檔同目錄下放一個文字檔 (version.txt)，內容為組件的版本號 (AssemblyVersion) ","date":"2020-07-14","objectID":"/2020/07/visual-studio-get-version-after-build/:0:0","series":null,"tags":["dotnet","VisualStudio"],"title":"Visual Studio 專案建置完成後取得組件版本號並輸出在文字檔中","uri":"/2020/07/visual-studio-get-version-after-build/#"},{"categories":["dotnet"],"content":" 需求目前專案的版本號是直接定義在 AssemblyInfo.cs 中的 AssemblyVersion 無腦做法就是直接把 version.txt 加到專案裡面並設定為 Always output，每次要更新版號時，除了更新 AseesmblyInfo.cs，也要一併變更 version.txt 的內容 為了避免版本號分散在不同檔案中，所以就找了一個方法可以讓這個動作自動化 ","date":"2020-07-14","objectID":"/2020/07/visual-studio-get-version-after-build/:1:0","series":null,"tags":["dotnet","VisualStudio"],"title":"Visual Studio 專案建置完成後取得組件版本號並輸出在文字檔中","uri":"/2020/07/visual-studio-get-version-after-build/#需求"},{"categories":["dotnet"],"content":" 作法 缷載目前專案，編輯 *.csproj 加入自定建置後動作 xml \u003cTarget Name=\"PostBuildMacros\"\u003e \u003cGetAssemblyIdentity AssemblyFiles=\"$(TargetPath)\"\u003e \u003cOutput TaskParameter=\"Assemblies\" ItemName=\"Targets\" /\u003e \u003c/GetAssemblyIdentity\u003e \u003cItemGroup\u003e \u003cVersionNumber Include=\"@(Targets-\u003e'%(Version)')\" /\u003e \u003c/ItemGroup\u003e \u003c/Target\u003e \u003cPropertyGroup\u003e \u003cPostBuildEventDependsOn\u003e $(PostBuildEventDependsOn); PostBuildMacros; \u003c/PostBuildEventDependsOn\u003e \u003cPostBuildEvent\u003eecho Version: @(VersionNumber) \u0026gt; version.txt\u003c/PostBuildEvent\u003e \u003c/PropertyGroup\u003e 重新載入專案，並進行建置，就會看到 version.txt 出現了 Info 可以在專案屬性-\u003e建置事件，編輯建置後事件命令列，修改為自行需要的動作 ","date":"2020-07-14","objectID":"/2020/07/visual-studio-get-version-after-build/:2:0","series":null,"tags":["dotnet","VisualStudio"],"title":"Visual Studio 專案建置完成後取得組件版本號並輸出在文字檔中","uri":"/2020/07/visual-studio-get-version-after-build/#作法"},{"categories":["dotnet"],"content":" Reference Determine assembly version during a post-build event GetAssemblyIdentity task ","date":"2020-07-14","objectID":"/2020/07/visual-studio-get-version-after-build/:3:0","series":null,"tags":["dotnet","VisualStudio"],"title":"Visual Studio 專案建置完成後取得組件版本號並輸出在文字檔中","uri":"/2020/07/visual-studio-get-version-after-build/#reference"},{"categories":["Flutter"],"content":"json_serializable 預設會把 enum 序列化為字串，有時候需要序列化為整數值，使用 @JsonValue 指定列舉值","date":"2020-07-07","objectID":"/2020/07/flutter-enum-json-serialize-to-int/","series":null,"tags":["Flutter","dart","json"],"title":"Flutter enum 做 Json 序列化時指定整數值","uri":"/2020/07/flutter-enum-json-serialize-to-int/"},{"categories":["Flutter"],"content":"json_serializable 預設會把 enum 序列化為字串，有時候需要序列化為整數值 假設有個 class 定義如下 dart import 'package:json_annotation/json_annotation.dart'; part 'fruit.g.dart'; enum Fruit { apple, banana, orange, } @JsonSerializable() class Test { final Fruit fruit; Test({this.fruit}); factory Test.fromJson(Map\u003cString, dynamic\u003e json) =\u003e _$TestFromJson(json); Map\u003cString, dynamic\u003e toJson() =\u003e _$TestToJson(this); } 序列化為 json 結果 dart print(jsonEncode(Test(fruit: Fruit.apple))); // {\"fruit\":\"apple\"} 如果想要讓 enum 表示為整數值，可以用 @JsonValue 指定列舉值 dart enum Fruit { @JsonValue(0) apple, @JsonValue(1) banana, @JsonValue(2) orange, } 這樣結果會變成 dart print(jsonEncode(Test(fruit: Fruit.apple))); // {\"fruit\":0} json_serializable 的 example 裡面似乎沒寫到 JsonValue 🤣 ","date":"2020-07-07","objectID":"/2020/07/flutter-enum-json-serialize-to-int/:0:0","series":null,"tags":["Flutter","dart","json"],"title":"Flutter enum 做 Json 序列化時指定整數值","uri":"/2020/07/flutter-enum-json-serialize-to-int/#"},{"categories":["Flutter"],"content":" Reference json_serializable enum values in dart json_annotation package json_serializable package ","date":"2020-07-07","objectID":"/2020/07/flutter-enum-json-serialize-to-int/:0:1","series":null,"tags":["Flutter","dart","json"],"title":"Flutter enum 做 Json 序列化時指定整數值","uri":"/2020/07/flutter-enum-json-serialize-to-int/#reference"},{"categories":["dotnet"],"content":".NET 的 `X509Certificate2` 預設只能讀取 PFX/PKCS12 格式的檔案，手邊有專案產生的 `*.pem` 憑證，可以使用 openssl 轉換","date":"2020-06-20","objectID":"/2020/06/dotnet-x509certificate-convert/","series":null,"tags":["openssl","certificate","憑證","X509Certificate","dotnet"],"title":"憑證 pem 檔轉換成 .NET 用的 pfx 檔 🔏","uri":"/2020/06/dotnet-x509certificate-convert/"},{"categories":["dotnet"],"content":".NET 的 X509Certificate2 預設只能讀取 PFX/PKCS12 格式的檔案，手邊有專案產生的 *.pem 憑證，可以使用 openssl 轉換 ","date":"2020-06-20","objectID":"/2020/06/dotnet-x509certificate-convert/:0:0","series":null,"tags":["openssl","certificate","憑證","X509Certificate","dotnet"],"title":"憑證 pem 檔轉換成 .NET 用的 pfx 檔 🔏","uri":"/2020/06/dotnet-x509certificate-convert/#"},{"categories":["dotnet"],"content":" openssl 語法 shell openssl pkcs12 -export -out \u003coutput\u003e -in \u003ccertificate\u003e -inkey \u003ckey\u003e [-certifile \u003cmore certificate\u003e] ","date":"2020-06-20","objectID":"/2020/06/dotnet-x509certificate-convert/:1:0","series":null,"tags":["openssl","certificate","憑證","X509Certificate","dotnet"],"title":"憑證 pem 檔轉換成 .NET 用的 pfx 檔 🔏","uri":"/2020/06/dotnet-x509certificate-convert/#openssl-語法"},{"categories":["dotnet"],"content":" 範例手邊有 cert.pem 跟 key.pem，需要轉檔成 cert.pfx shell openssl pkcs12 -export -out cert.pfx -in cert.pem -inkey key.pem 下完命令後會需要輸入自訂憑證密碼 ","date":"2020-06-20","objectID":"/2020/06/dotnet-x509certificate-convert/:2:0","series":null,"tags":["openssl","certificate","憑證","X509Certificate","dotnet"],"title":"憑證 pem 檔轉換成 .NET 用的 pfx 檔 🔏","uri":"/2020/06/dotnet-x509certificate-convert/#範例"},{"categories":["dotnet"],"content":" Reference Create a .pfx/.p12 Certificate File Using OpenSSL 使用 OpenSSL 從 PFX 憑證文件匯出 PEM 憑證與金鑰 ","date":"2020-06-20","objectID":"/2020/06/dotnet-x509certificate-convert/:3:0","series":null,"tags":["openssl","certificate","憑證","X509Certificate","dotnet"],"title":"憑證 pem 檔轉換成 .NET 用的 pfx 檔 🔏","uri":"/2020/06/dotnet-x509certificate-convert/#reference"},{"categories":["Windows"],"content":"升級到 Win10 後，總覺得預設的圖片開啟程式相片不是很習慣，想換回 Win7 的相片檢視器該怎麼做？ ","date":"2020-06-17","objectID":"/2020/06/win10-photoviewer/:0:0","series":null,"tags":["Windows","Win10"],"title":"Win10 改回舊版相片檢視器","uri":"/2020/06/win10-photoviewer/#"},{"categories":["Windows"],"content":" 詳細步驟 按 windows + r，輸入 regedit 開啟登錄檔編輯器 切換到到路徑 HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows Photo Viewer\\Capabilities\\FileAssociations 右鍵-\u003e新增-\u003e字串值 名稱輸入想要加入的照片格式副檔名，例如 .jpg，數值資料輸入 PhotoViewer.FileAssoc.Tiff 後按確定離開 重複步驟4，把想用舊版相片檢視器開啟的種類副檔案也加入，這邊總共新增了 .jpg .jpeg .gif .png .bmp .ico 接下來到檔案總管，對照片按右鍵-\u003e開啟檔案，就會看到可以用Windows 相片檢視器開啟了 ","date":"2020-06-17","objectID":"/2020/06/win10-photoviewer/:1:0","series":null,"tags":["Windows","Win10"],"title":"Win10 改回舊版相片檢視器","uri":"/2020/06/win10-photoviewer/#詳細步驟"},{"categories":["Windows"],"content":" 比較圖 比較圖片為放大 100% 的效果，左邊是 Win7 的相片檢視器，右邊是 Win10 的相片，可以發現 Win10 的放大應該是用雙線性或三線性縮放處理過，比較平滑，而 Win7 是直接線性縮放，照片會呈現格子狀 ","date":"2020-06-17","objectID":"/2020/06/win10-photoviewer/:2:0","series":null,"tags":["Windows","Win10"],"title":"Win10 改回舊版相片檢視器","uri":"/2020/06/win10-photoviewer/#比較圖"},{"categories":["VSCode"],"content":"vscode 可以對不同語言用不同的設定，在某些情況下會比較方便 ","date":"2020-05-28","objectID":"/2020/05/vscode-language-specific-editor-settings/:0:0","series":null,"tags":["VSCode"],"title":"Visual Studio Code 針對各語言用不同編輯器設定的方法","uri":"/2020/05/vscode-language-specific-editor-settings/#"},{"categories":["VSCode"],"content":" 設定方式 1在 vscode 中按 Ctrl + Shift + P 輸入 Open Settings 打開 vscode 的設定檔，針對各語系加入設定 json \"[csharp]\":{ \"editor.tabSize\": 4 }, \"[markdown]\":{ \"editor.wordWrap\": \"on\", \"editor.quickSuggestions\": false } ","date":"2020-05-28","objectID":"/2020/05/vscode-language-specific-editor-settings/:1:0","series":null,"tags":["VSCode"],"title":"Visual Studio Code 針對各語言用不同編輯器設定的方法","uri":"/2020/05/vscode-language-specific-editor-settings/#設定方式-1"},{"categories":["VSCode"],"content":" 設定方式 2在 vscode 中按 Ctrl + Shift + P 輸入 Configure Language Specific Settings，再選擇要設定的語系，vscode 會幫你打開 settings.json 並加入對應的語系，再自行加入所需設定就可以 ","date":"2020-05-28","objectID":"/2020/05/vscode-language-specific-editor-settings/:2:0","series":null,"tags":["VSCode"],"title":"Visual Studio Code 針對各語言用不同編輯器設定的方法","uri":"/2020/05/vscode-language-specific-editor-settings/#設定方式-2"},{"categories":["VSCode"],"content":" Reference https://code.visualstudio.com/docs/getstarted/settings#_language-specific-editor-settings ","date":"2020-05-28","objectID":"/2020/05/vscode-language-specific-editor-settings/:3:0","series":null,"tags":["VSCode"],"title":"Visual Studio Code 針對各語言用不同編輯器設定的方法","uri":"/2020/05/vscode-language-specific-editor-settings/#reference"},{"categories":["VisualStudio"],"content":"建置 .NET 4.0 專案時遇到的奇怪錯誤","date":"2020-05-19","objectID":"/2020/05/vs-wired-build-error/","series":null,"tags":["VisualStudio","dotnet"],"title":"Visual Studio 奇怪的 Build error","uri":"/2020/05/vs-wired-build-error/"},{"categories":["VisualStudio"],"content":"在公司準備要建置一個平常的 .NET 專案時忽然跳了從沒看過的錯誤 這個 sln 專案裡面有 256 個 .NET 專案，之前都順利編譯，但前幾天突然跳建置失敗，其中某個專案跳了以下錯誤 text error : Your project does not reference \".NETFramework,Version=v4.0\" framework. Add a reference to \".NETFramework,Version=v4.0\" in the \"TargetFrameworks\" property of your project file and then re-run NuGet restore. 詢問其他同事，卻可以正常建置，所以問題應該不在專案上 再嘗試過以下幾個動作，通通無效 🙄 使用 rebuild 重開 Visual Studio 用不同版本的 Visual Studio 編譯 (VS2017, VS2019) 刪掉 VS 的 cached (.vs 資料夾) 最後將出問題的專案的 bin 及 obj 資料夾刪掉後，再重新 Build 就成功了 🎉 推測是最近有升級 Windows 10 更新到 ver 2004…導致系統某些地方秀逗了 ","date":"2020-05-19","objectID":"/2020/05/vs-wired-build-error/:0:0","series":null,"tags":["VisualStudio","dotnet"],"title":"Visual Studio 奇怪的 Build error","uri":"/2020/05/vs-wired-build-error/#"},{"categories":["Windows"],"content":"Win10 常用快速鍵","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/"},{"categories":["Windows"],"content":"紀錄一下升級到 Windows 10 之後我常用的快速鍵 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:0:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#"},{"categories":["Windows"],"content":" 快速選單 Windows + x可以從這個選單打開工作管理員、設定、事件檢視器等視窗 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:1:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#快速選單-windows--x"},{"categories":["Windows"],"content":" 螢幕擷取畫面 Windows + Shift + S一般常用的是 PrtSc (全螢幕) 或 Alt + PrtSc (目前 focus 的視窗) 在以前如果要再做裁剪或加註解的話就會另外開小畫家或其他繪圖軟體來處理 Win10 有新增一個區域擷圖的功能，快速鍵為 Windows + Shift + S 擷圖完成後會直接放到剪貼簿裡面，並會跳一個系統通知，如果要編輯的話，點一下系統通知就會直接進到編輯器 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:2:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#螢幕擷取畫面-windows--shift--s"},{"categories":["Windows"],"content":" 剪貼簿歷程記錄 Windows + V這個功能要先去設定開啟剪貼簿歷程記錄 然後按 Windows + V 就可以打開剪貼簿歷程記錄了 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:3:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#剪貼簿歷程記錄-windows--v"},{"categories":["Windows"],"content":" 虛擬桌面Windows 終於內建虛擬桌面了 功能 Shortcut 創建虛擬桌面 Windows + Ctrl + D 關閉目前的虛擬桌面 Windows + Ctrl + F4 切換到下一個虛擬桌面 Windows + Ctrl + → 切換到上一個虛擬桌面 Windows + Ctrl + ← 另外 Windows + Tab 可以管理目前所有視窗及虛擬桌面，並可以把視窗拖曳到指定的虛擬桌面裡面 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:4:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#虛擬桌面"},{"categories":["Windows"],"content":" Emoji 符號表 Windows + . 或 Windows + ;就是開一個 Emoji 快速輸入表出來😎 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:5:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#emoji-符號表-windows---或-windows--"},{"categories":["Windows"],"content":" Reference https://support.microsoft.com/zh-tw/help/12445 ","date":"2020-05-12","objectID":"/2020/05/win10-useful-shortcuts/:6:0","series":null,"tags":["Windows","Win10"],"title":"Win10 常用快速鍵","uri":"/2020/05/win10-useful-shortcuts/#reference"},{"categories":["Unpacking"],"content":"Logitect MX Vertical 開箱","date":"2020-05-10","objectID":"/2020/05/logi-mx-vertical/","series":null,"tags":["Shopping","Mouse/Keyboard","開箱"],"title":"Logitect MX Vertical","uri":"/2020/05/logi-mx-vertical/"},{"categories":["Unpacking"],"content":"新買一隻特別的滑鼠，準備要在日常工作的時候用看看 外盒 跟以前比起來，包裝變簡單了，也變的很好拆 內容物也很簡單，連說明書都沒有 反過來 跟目前在家使用的 G402 比比看 手握照 這隻初步握起來不是很習慣，跟平常用滑鼠的姿勢差很多，定位的感覺也不太一樣 目前在公司是用已經停產的 Logitech MX518 (好像又有復刻版) MX Vertical 先帶到公司用個一兩週之後再看看怎樣，希望能減輕手部的負擔 🤔 這也是我第一次買無線滑鼠，希望不會後悔 XDD ","date":"2020-05-10","objectID":"/2020/05/logi-mx-vertical/:0:0","series":null,"tags":["Shopping","Mouse/Keyboard","開箱"],"title":"Logitect MX Vertical","uri":"/2020/05/logi-mx-vertical/#"},{"categories":["Unpacking"],"content":" Reference https://www.logitech.com/zh-tw/product/mx-vertical-ergonomic-mouse ","date":"2020-05-10","objectID":"/2020/05/logi-mx-vertical/:1:0","series":null,"tags":["Shopping","Mouse/Keyboard","開箱"],"title":"Logitect MX Vertical","uri":"/2020/05/logi-mx-vertical/#reference"},{"categories":["News"],"content":"Github 在 GitHub satellite 公佈 Codespaces","date":"2020-05-07","objectID":"/2020/05/github-codespaces-feature/","series":null,"tags":["Codespaces","GitHub","VSCode"],"title":"Github Codespaces 🛰️","uri":"/2020/05/github-codespaces-feature/"},{"categories":["News"],"content":"Github 在 satellite 🛰️ 公佈 Codespaces 現在直接在網頁內建 VSCode，aka 史上最強文字編輯器 嗯，以後大概 24 小時 on call coding 是常態了 XDD ","date":"2020-05-07","objectID":"/2020/05/github-codespaces-feature/:0:0","series":null,"tags":["Codespaces","GitHub","VSCode"],"title":"Github Codespaces 🛰️","uri":"/2020/05/github-codespaces-feature/#"},{"categories":["News"],"content":" Reference https://github.blog/2020-05-06-new-from-satellite-2020-github-codespaces-github-discussions-securing-code-in-private-repositories-and-more/#codespaces https://www.ithome.com.tw/news/137465 ","date":"2020-05-07","objectID":"/2020/05/github-codespaces-feature/:1:0","series":null,"tags":["Codespaces","GitHub","VSCode"],"title":"Github Codespaces 🛰️","uri":"/2020/05/github-codespaces-feature/#reference"},{"categories":["Notes"],"content":"測試用 RTSP Stream","date":"2020-05-05","objectID":"/2020/05/test-rtsp-stream/","series":null,"tags":["LiveStream","RTSP"],"title":"測試用 RTSP Stream","uri":"/2020/05/test-rtsp-stream/"},{"categories":["Notes"],"content":"記錄一下可能會用到的免費測試串流，未來就直接放在這篇了 https://www.wowza.com/html/mobile.html rtsp://wowzaec2demo.streamlock.net/vod/mp4:BigBuckBunny_115k.mov ","date":"2020-05-05","objectID":"/2020/05/test-rtsp-stream/:0:0","series":null,"tags":["LiveStream","RTSP"],"title":"測試用 RTSP Stream","uri":"/2020/05/test-rtsp-stream/#"},{"categories":["Jobs"],"content":"接手別人的專案實在 hen 痛苦 💔 這幾天在處理公司另一個單位交接過來的程式，交接說明裡面寫說使用 MS SQL Server 但我在確認專案資料的時候卻發現有參考到 MySQL 的 Assembly 🙄 今天在修改一些問題的時候仔細研究了一下，終於發現是哪邊參考到了 csharp try { using(var db = new co_xxxx_entities()) { // sql server connection // .... } } catch (MySqlException ex) { // .... } 不曉得為何連接到 SQL Server 的 code 會期待收到 MySqlException … 🤦‍♂️ ","date":"2020-05-04","objectID":"/2020/05/job-sqlserver-mysql-murmur/:0:0","series":null,"tags":["Murmur"],"title":"200504 工作碎唸","uri":"/2020/05/job-sqlserver-mysql-murmur/#"},{"categories":["CI/CD"],"content":"用 Gitlab CI 建置自動化編譯 Unity 專案流程，在 Runner 註冊為服務時，若專案過大可能會發生任務卡住的問題","date":"2020-05-01","objectID":"/2020/05/gitlab-runner-service-unity-build-failed/","series":null,"tags":["Unity3D","GitLab","CI/CD"],"title":"Gitlab Runner as Windows service freezed when building Unity project","uri":"/2020/05/gitlab-runner-service-unity-build-failed/"},{"categories":["CI/CD"],"content":"用 Gitlab CI 建置自動化編譯 Unity 專案流程，在 Runner 註冊為服務時，若專案過大可能會發生任務卡住的問題 text CD C:\\GitLab-Runner .\\gitlab-runner.exe install .\\gitlab-runner.exe start 若用直接執行的方式執行 Job 就不會卡住 text CD C:\\GitLab-Runner .\\gitlab-runner.exe run 卡住之後查看 Unity Editor Log，發現有異常訊息 Failed to get socket connection from UnityShaderCompiler.exe shader compiler! text Failed to get socket connection from UnityShaderCompiler.exe shader compiler! C:/Program Files/Unity/Editor/Data/Tools/UnityShaderCompiler.exe UnityEditor.BuildPipeline:BuildPlayerInternalNoCheck(String[], String, String, BuildTargetGroup, BuildTarget, BuildOptions, Boolean) UnityEditor.BuildPipeline:BuildPlayerInternal(String[], String, String, BuildTargetGroup, BuildTarget, BuildOptions) (at C:\\buildslave\\unity\\build\\Editor\\Mono\\BuildPipeline.bindings.cs:358) UnityEditor.BuildPipeline:BuildPlayer(String[], String, String, BuildTargetGroup, BuildTarget, BuildOptions) (at C:\\buildslave\\unity\\build\\Editor\\Mono\\BuildPipeline.bindings.cs:257) UnityEditor.BuildPipeline:BuildPlayer(BuildPlayerOptions) (at C:\\buildslave\\unity\\build\\Editor\\Mono\\BuildPipeline.bindings.cs:240) [C:\\buildslave\\unity\\build\\Tools/UnityShaderCompiler/ShaderCompilerClient.cpp line 290] (Filename: Assets/xxxx.cs Line: 218) ","date":"2020-05-01","objectID":"/2020/05/gitlab-runner-service-unity-build-failed/:0:0","series":null,"tags":["Unity3D","GitLab","CI/CD"],"title":"Gitlab Runner as Windows service freezed when building Unity project","uri":"/2020/05/gitlab-runner-service-unity-build-failed/#"},{"categories":["CI/CD"],"content":" 發生原因根據這邊提到的，Service 的 Desktop heap 比較小，所以有可能在編譯大專案的時候資源不足讓程式卡住 ","date":"2020-05-01","objectID":"/2020/05/gitlab-runner-service-unity-build-failed/:1:0","series":null,"tags":["Unity3D","GitLab","CI/CD"],"title":"Gitlab Runner as Windows service freezed when building Unity project","uri":"/2020/05/gitlab-runner-service-unity-build-failed/#發生原因"},{"categories":["CI/CD"],"content":" 解法調大 non-interactive (services) sessions 的 heap 用 Administrator 執行 regedit.exe 編輯 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\SubSystems\\Windows 找到 SharedSection=1024,20480,768，調整第三組數字 diff - SharedSection=1024,20480,768 + SharedSection=1024,20480,2048 Warning 數值不要調太高避免影響原有桌面使用 ","date":"2020-05-01","objectID":"/2020/05/gitlab-runner-service-unity-build-failed/:2:0","series":null,"tags":["Unity3D","GitLab","CI/CD"],"title":"Gitlab Runner as Windows service freezed when building Unity project","uri":"/2020/05/gitlab-runner-service-unity-build-failed/#解法"},{"categories":["CI/CD"],"content":" Reference https://answers.unity.com/questions/1430683/failed-to-get-socket-connection-from-unityshaderco-2.html https://stackoverflow.com/questions/17472389/how-to-increase-the-maximum-number-of-child-processes-that-can-be-spawned-by-a-w/17472390#17472390 ","date":"2020-05-01","objectID":"/2020/05/gitlab-runner-service-unity-build-failed/:3:0","series":null,"tags":["Unity3D","GitLab","CI/CD"],"title":"Gitlab Runner as Windows service freezed when building Unity project","uri":"/2020/05/gitlab-runner-service-unity-build-failed/#reference"},{"categories":["Notes"],"content":"當有某個檔案或資料夾會因為測試需求而異動，但又不想簽入到 git repo 裡面 (例如 config 檔)，通常將路徑加入專案的 .gitignore 做排除 ","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:0:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#"},{"categories":["Notes"],"content":" git 忽略異動","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:0:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#git-忽略異動"},{"categories":["Notes"],"content":" .gitigore就把不想要加到 git 的東西寫在 .gitignore 檔裡面 ","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:1:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#gitigore"},{"categories":["Notes"],"content":" .git/info/exclude若不想修改專案的 .gitignore，又想排除異動的話，可以考慮放到 .git/info/exclude，語法與 .gitignore 相同 but… .git/info/exclude 失效的時候怎麼辦？ ","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:2:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#gitinfoexclude"},{"categories":["Notes"],"content":" skip-worktree 忽略追蹤異動 text git update-index --skip-worktree [\u003cfile\u003e...] 解除忽略 text git update-index --no-skip-worktree [\u003cfile\u003e...] ","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:3:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#skip-worktree"},{"categories":["Notes"],"content":" assume-unchanged 忽略追蹤異動 text git update-index --assume-unchanged [\u003cfile\u003e...] 解除忽略 text git update-index --no-assume-unchanged [\u003cfile\u003e...] ","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:4:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#assume-unchanged"},{"categories":["Notes"],"content":" Reference https://clouding.city/git/ignore-tracked/ https://blog.miniasp.com/post/2014/12/23/Git-Advanced-Assume-Unchanged-Skip-worktree https://hashrocket.com/blog/posts/ignore-specific-file-changes-only-on-current-machine-in-git https://stackoverflow.com/questions/1753070/how-do-i-configure-git-to-ignore-some-files-locally ","date":"2020-05-01","objectID":"/2020/05/gitignore-alternate/:5:0","series":null,"tags":["git"],"title":"git ignore 替代方案","uri":"/2020/05/gitignore-alternate/#reference"},{"categories":["Notes"],"content":" 值得紀念的首PO這裡主要會放一些平常工作上遇到的問題或一些學習紀錄 希望能養成持續紀錄的習慣 ","date":"2020-04-30","objectID":"/2020/04/firstpost/:0:0","series":null,"tags":null,"title":"The Fisrt post","uri":"/2020/04/firstpost/#值得紀念的首po"}]